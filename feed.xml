<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://genicsblog.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://genicsblog.com/" rel="alternate" type="text/html"/><updated>2022-03-25T08:43:03+00:00</updated><id>https://genicsblog.com/feed.xml</id><title type="html">Genics Blog</title><subtitle>An open source developer publication aimed at sharing well explained tutorials on various topics for the developer community.</subtitle><entry><title type="html">8 No Brainer Ways to Keep Your Heroku App Awake</title><link href="https://genicsblog.com/gouravkhunger/8-ways-to-keep-your-heroku-app-awake" rel="alternate" type="text/html" title="8 No Brainer Ways to Keep Your Heroku App Awake"/><published>2022-03-17T00:00:00+00:00</published><updated>2022-03-17T00:00:00+00:00</updated><id>https://genicsblog.com/gouravkhunger/8-ways-to-keep-your-heroku-app-awake</id><content type="html" xml:base="https://genicsblog.com/gouravkhunger/8-ways-to-keep-your-heroku-app-awake"><![CDATA[<p>Heroku is one of the easiest ways to quickly get your applications up and running on the web!</p> <p>And what’s so good about it? Heroku’s free plan is pretty generous. Although it gives you just 550 hours of free hosting a month, it can be extended to a solid 1000 by verifying yourself by adding a credit card.</p> <p>The only major issue with its free plan is that if your web app has not received any traffic for 30 minutes, it will auto shut your app :(</p> <p>The next requests that your app receives would restart the application, but it takes 7-8 seconds to restart the server which the app is hosted on. This means that if you app went to sleep, the user would have to wait for the app to wake up again, which surely does not provide a good UX.</p> <p>If you are struggling to keep your app awake, don’t worry. I’ve got you!</p> <p>Here are 8 ways to keep your Heroku app awake:</p> <ul> <li>Using a combination of <code class="language-plaintext highlighter-rouge">setInterval()</code> and <code class="language-plaintext highlighter-rouge">http.get()</code> functions.</li> <li>Using <code class="language-plaintext highlighter-rouge">node-cron</code> to ping your Heroku app.</li> <li>Using Kaffeine to ping your Heroku app.</li> <li>Pinging your app using Pingdom.</li> <li>With the <code class="language-plaintext highlighter-rouge">heroku-keep-awake</code> npm package.</li> <li>Configuring Newrelic addon to ping your Heroku app.</li> <li>Using other services like Uptime Robot to ping the app so it never sleeps.</li> <li>Scale up your Heroku app to hobby plan for just $7/month.</li> </ul> <p>Let’s dive into how to use these tools! For this tutorial we’ll assume we have a Heroku application hosted at example.herokuapp.com.</p> <h2 id="1-using-setinterval-and-httpget-functions">1. Using setInterval() and http.get() functions</h2> <p>This is by far the easiest way to keep your Heroku app awake without using any third party tools. <code class="language-plaintext highlighter-rouge">setInterval()</code> and <code class="language-plaintext highlighter-rouge">http.get()</code> functions are inbuilt into Node.js!</p> <p>Here’s how you can use these functions to your advantage:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">http</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://example.herokuapp.com</span><span class="dl">"</span><span class="p">);</span>
<span class="p">},</span> <span class="mi">25</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span> <span class="c1">// every 25 minutes</span>
</code></pre></div></div> <p>Place this code inside your main <code class="language-plaintext highlighter-rouge">index.js</code> file, which is responsible to start your server/app. This will make sure to ping the application with a <code class="language-plaintext highlighter-rouge">GET</code> request every 25 minutes, which will simulate traffic to your application before 30 minutes of inactivity and thus keep your application awake!</p> <h2 id="2-using-node-cron">2. Using node-cron</h2> <p><a href="https://github.com/node-cron/node-cron"><code class="language-plaintext highlighter-rouge">node-cron</code></a> is a package that let’s you easily schedule cron jobs to perform tasks at specific intervals set by cron expressions. You can use this package to your advantage to keep your Heroku app awake!</p> <p>Let’s say you are already working with <a href="https://github.com/axios/axios"><code class="language-plaintext highlighter-rouge">axios</code></a> in your application, using it along with node-cron is as simple as:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">axios</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">axios</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">cron</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">node-cron</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">cron</span><span class="p">.</span><span class="nx">schedule</span><span class="p">(</span><span class="dl">'</span><span class="s1">*/25 * * * *</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">axios</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">example.herokuapp.com</span><span class="dl">'</span><span class="p">);</span>
<span class="p">})</span>
</code></pre></div></div> <p>The expression <code class="language-plaintext highlighter-rouge">*/25 * * * *</code> means every 25 minutes of any hour/day/month. This will run the axios get command to ping your app every 25 minutes.</p> <h2 id="3-using-kaffeine">3. Using Kaffeine</h2> <p>I am pretty sure you have heard of <a href="https://kaffeine.herokuapp.com">Kaffeine</a> a lot. It is one of the most popular tool to ping your Heroku app.</p> <p><img src="https://user-images.githubusercontent.com/46792249/158734348-13cb4a84-34a6-4ab1-add7-9a581b76b636.png" alt="Screenshot of Kaffeine tool that pings your Heroku app every 30 minutes" class="aspect-video w-full"/></p> <p>Basically, it is a tool with a database of Heroku apps. Every 30 minutes, it goes through the list of stored apps and pings them. This is an easy way to ping your app without any manual work involved.</p> <p>But a major problem with Kaffeine is it has a big database of sites to ping (79406 as of now). This essentially means that it can be slow to iterate through the list. Even being some seconds later than 30 minutes can make your Heroku app go to sleep mode.</p> <p>With some testing I have found that you can expect to see your app restart about 7-8 times a day, even while using Kaffeine, but this basically defies the purpose of keep the app awake 24/7. It is recommended to use the manual ping methods listed above.</p> <h2 id="4-pingdom">4. Pingdom</h2> <p><a href="https://www.pingdom.com">Pingdom</a> is a easy to use analysing and monitoring tool for your website. In the process of monitoring your site for uptime, it will ping your Heroku site which will keep it awake!</p> <h2 id="5-use-heroku-keep-awake-npm-package">5. Use Heroku-keep-awake npm package.</h2> <p><code class="language-plaintext highlighter-rouge">Heroku-keep-awake</code> is a lightweight <a href="https://www.npmjs.com/package/heroku-keep-awake">npm package</a> that built specially to help you keep your apps alive.</p> <p><a href="https://github.com/colbymillerdev/heroku-keep-awake/blob/develop/index.js">Internally</a>, it uses <a href="https://github.com/moment/moment">moment.js</a> and <a href="https://github.com/node-fetch/node-fetch">node-fetch</a> to simulate traffic to your application.</p> <p>You can install it with:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i heroku-keep-awake
</code></pre></div></div> <p>Using it is as simple as:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>

<span class="c1">// wakeDyno for pinging single dyno</span>
<span class="c1">// wakeDynos for pinging multiple dynos</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">wakeDyno</span><span class="p">,</span> <span class="nx">wakeDynos</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">heroku-keep-awake</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">DYNO_URL</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">https://example.herokuapp.com</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">DYNO_URLS</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">https://example.herokuapp.com</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">https://another-example.herokuapp.com</span><span class="dl">'</span><span class="p">]</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">wakeDyno</span><span class="p">(</span><span class="nx">DYNO_URL</span><span class="p">);</span> <span class="c1">// Pass a single dyno url string to keep it awake</span>

    <span class="nx">wakeDynos</span><span class="p">(</span><span class="nx">DYNO_URLS</span><span class="p">);</span> <span class="c1">// Pass an array of Dynos to keep awake</span>
<span class="p">})</span>
</code></pre></div></div> <h2 id="6-setup-new-relic-apm-plugin-for-heroku">6. Setup New Relic APM plugin for Heroku</h2> <p>Heroku supports a wide set of addons, one of which is <a href="https://elements.heroku.com/addons/newrelic">New Relic</a>. It offers features such as:</p> <ul> <li>Monitoring critical transactions across your website.</li> <li>Ensure the backend server apps are never the bottleneck for server issues.</li> <li>Dashboard to track everything.</li> <li>Analyze front-end and back-end applications to identify the root cause of performance issues.</li> </ul> <p>and a lot more.</p> <p>You can set up a free version to monitor your application. In the process of monitoring your application, it will ping your application which will keep it alive!</p> <h2 id="7-uptime-robot">7. Uptime Robot</h2> <p><a href="https://uptimerobot.com">Uptime Robot</a> is yet another free and flexible website monitoring tool, whose free plan can help you monitor HTTP security, response times, ports, keywords and a lot more.</p> <p>It does it in the same way, by pinging the site to get the details. When it pings your Heroku app, it simulates traffic to it, which will keep it awake!</p> <h2 id="8-get-a-hobby-dyno-to-avoid-the-mess">8. Get a Hobby dyno to avoid the mess</h2> <p>If you actually like Heroku as a service I’ll recommend you to actually upgrade your dyno plan to Hobby, which is just $7/month. That gives you the option to keep your app awake 24/7 out of the box.</p> <p>Not only does it keep the dyno awake 24/7, it gives you more features like:</p> <ul> <li>Free SSL certificates for your sites.</li> <li>Automatic certificate management.</li> <li>Dynos that never sleep.</li> </ul> <p>To know more about Heroku’s pricing, please visit their <a href="https://www.heroku.com/pricing">pricing page</a>.</p> <h2 id="conclusion">Conclusion</h2> <p>This was it for the list of 8 ways you could keep your Heroku apps awake 24/7.</p> <p>I personally recommend you to go either with <code class="language-plaintext highlighter-rouge">setInterval()</code> way (because of no 3rd party interference), or with <code class="language-plaintext highlighter-rouge">node-cron</code> (using open source tools) as both of them give you the control on how you ping the app.</p> <p>So, what tools/hacks are you actually using to achieve this task? Let me know in the comments below! Do you need help with programming? Join <a href="https://discord.genicsblog.com">our discord server</a>!</p> <p><a href="https://github.com/gouravkhunger">Let’s get in touch</a>.</p>]]></content><author><name>Gourav Khunger</name></author><category term="web"/><category term="web-development"/><category term="tools"/><summary type="html"><![CDATA[Compilation of the easiest ways to keep your free Heroku dyno running 24/7.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/158544648-96aac1a5-d4dc-4f55-adff-d0479f6f447f.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/158544648-96aac1a5-d4dc-4f55-adff-d0479f6f447f.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">A newbie’s cheatsheet for Javascript</title><link href="https://genicsblog.com/abhiraj/the-javascript-cheatsheet-for-new-coders" rel="alternate" type="text/html" title="A newbie’s cheatsheet for Javascript"/><published>2022-03-14T00:00:00+00:00</published><updated>2022-03-14T00:00:00+00:00</updated><id>https://genicsblog.com/abhiraj/the-javascript-cheatsheet-for-new-coders</id><content type="html" xml:base="https://genicsblog.com/abhiraj/the-javascript-cheatsheet-for-new-coders"><![CDATA[<p>JavaScript forms the foundation of almost everything you see on the web. So, with web development on the rise in 2022 and it being the base of thousands of popular frameworks, it’s a good language to learn!</p> <p>This is the ultimate beginner cheatsheet for Javascript. It’s a collection of useful snippets and tips to help you get started with Javascript.</p> <h2 id="basics">Basics</h2> <h3 id="1-include-js-code-in-a-html-page">1. Include JS code in a HTML page</h3> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span><span class="nt">&gt;</span>

<span class="c1">//JS code here</span>

<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div> <h3 id="2-call-an-external-js-file">2. Call an external JS file</h3> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"thematrix.js"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/script&gt;</span> 
</code></pre></div></div> <h3 id="3-include-comments">3. Include comments</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Single line comment</span>
</code></pre></div></div> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
Multi line comment
*/</span>
</code></pre></div></div> <h2 id="data-types">Data types</h2> <h3 id="1-numbers">1. Numbers</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">age</span> <span class="o">=</span> <span class="mi">23</span>
</code></pre></div></div> <h3 id="2-variables">2. Variables</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">x</span>
</code></pre></div></div> <h3 id="3-text-strings">3. Text strings</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hacker</span><span class="dl">"</span>
</code></pre></div></div> <h3 id="4-operations">4. Operations</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">9</span>
</code></pre></div></div> <h3 id="5-truefalse-boolean">5. True/False (Boolean)</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="kc">true</span>
</code></pre></div></div> <h3 id="6-constant-values">6. Constant Values</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">420</span>
</code></pre></div></div> <h3 id="7-objects">7. Objects</h3> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">firstname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Abhiraj</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">lastname</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Bhowmick</span><span class="dl">"</span>
<span class="p">}</span>
</code></pre></div></div> <h2 id="storing-data">Storing data</h2> <h3 id="1-var">1. <code class="language-plaintext highlighter-rouge">var</code></h3> <p>This is the most common way to store data. <code class="language-plaintext highlighter-rouge">var</code>s can be reassigned but can only be accessed inside a function.</p> <p>Variables defined with <code class="language-plaintext highlighter-rouge">var</code> move to top when code is executed.</p> <h3 id="2-const">2. <code class="language-plaintext highlighter-rouge">const</code></h3> <p><code class="language-plaintext highlighter-rouge">const</code> values cannot be reassigned and are not accessible before they appear within the code.</p> <h3 id="3-let">3. <code class="language-plaintext highlighter-rouge">let</code></h3> <p><code class="language-plaintext highlighter-rouge">let</code> is similar to <code class="language-plaintext highlighter-rouge">const</code> but let variable can be re-assigned but not re-declared</p> <h2 id="operators">Operators</h2> <h3 id="1-logical-operators">1. Logical Operators</h3> <p><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> : logical and</p> <p><code class="language-plaintext highlighter-rouge">||</code> : logical or</p> <p><code class="language-plaintext highlighter-rouge">!</code> : logical not</p> <h3 id="2-arithmetic-operators">2. Arithmetic Operators</h3> <p><code class="language-plaintext highlighter-rouge">+</code> : Addition</p> <p><code class="language-plaintext highlighter-rouge">-</code> : Subtraction</p> <p><code class="language-plaintext highlighter-rouge">*</code> : Multiplication</p> <p><code class="language-plaintext highlighter-rouge">**</code> : Exponentiation (ES2016)</p> <p><code class="language-plaintext highlighter-rouge">/</code> : Division</p> <p><code class="language-plaintext highlighter-rouge">%</code> : Modulus (Division Remainder)</p> <p><code class="language-plaintext highlighter-rouge">++</code> : Increment</p> <p><code class="language-plaintext highlighter-rouge">--</code> : Decrement</p> <h3 id="3-comparison-operators">3. Comparison Operators</h3> <p><code class="language-plaintext highlighter-rouge">==</code> : equal to</p> <p><code class="language-plaintext highlighter-rouge">===</code> : equal value and equal type</p> <p><code class="language-plaintext highlighter-rouge">!=</code> : not equal</p> <p><code class="language-plaintext highlighter-rouge">!==</code> : not equal value or not equal type</p> <p><code class="language-plaintext highlighter-rouge">&gt;</code> : greater than</p> <p><code class="language-plaintext highlighter-rouge">&lt;</code> : less than</p> <p><code class="language-plaintext highlighter-rouge">&gt;=</code> : greater than or equal to</p> <p><code class="language-plaintext highlighter-rouge">&lt;=</code> : less than or equal to</p> <p><code class="language-plaintext highlighter-rouge">?</code> : ternary operator</p> <h3 id="4️-bitwise-operators">4️. Bitwise Operators</h3> <p><code class="language-plaintext highlighter-rouge">&amp;</code> : AND</p> <p><code class="language-plaintext highlighter-rouge">|</code> : OR</p> <p><code class="language-plaintext highlighter-rouge">~</code> : NOT</p> <p><code class="language-plaintext highlighter-rouge">^</code> : XOR</p> <p><code class="language-plaintext highlighter-rouge">&lt;&lt;</code> : Left shift</p> <p><code class="language-plaintext highlighter-rouge">&gt;&gt;</code> : Right shift</p> <p><code class="language-plaintext highlighter-rouge">&gt;&gt;&gt;</code> : Unsigned right shift</p> <h2 id="array-functions">Array Functions</h2> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">fruit</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">Apple</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Berries</span><span class="dl">"</span><span class="p">]</span>
</code></pre></div></div> <ol> <li> <p><code class="language-plaintext highlighter-rouge">concat()</code> : Join several arrays into one</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">indexof()</code> : Returns the first position at which a given element appears in an array</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">join()</code> : Combine elements of an array into a single string and return the string</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">lastindexof()</code> : Gives the last position at which a given element appears in an array</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">pop()</code> : Removes the last element of an array</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">push()</code> : Add a new element at the end</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">reverse()</code> : This method reverses the order of the array elements.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">sort()</code> : Sorts the array elements in a specified manner.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">toString()</code> : Converts the array elements to a string.</p> </li> <li> <p><code class="language-plaintext highlighter-rouge">valueOf()</code> : returns the relevant Number Object holding the value of the argument passed</p> </li> </ol> <h2 id="dates">Dates</h2> <p>Date object is used to get the year, month and day. It has methods to get and set day, month, year, hour, minute, and seconds.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">getDate</span><span class="p">()</span> <span class="c1">// Returns the date from the date object</span>

<span class="nx">getDay</span><span class="p">()</span> <span class="c1">// Returns the day from the date object</span>

<span class="nx">getHours</span><span class="p">()</span> <span class="c1">// Returns the hours from the date object</span>

<span class="nx">getMinutes</span><span class="p">()</span> <span class="c1">// Returns the minutes from the date object</span>

<span class="nx">getSeconds</span><span class="p">()</span> <span class="c1">// Returns the seconds from the date object</span>

<span class="nx">getTime</span><span class="p">()</span> <span class="c1">// Returns the time from the date object</span>
</code></pre></div></div> <h2 id="input-device-events">Input Device Events</h2> <h3 id="mouse-events">Mouse Events</h3> <p>Any change in the state of an object is referred to as an Event. With the help of JS, you can handle events, i.e., how any specific HTML tag will work when the user does something.</p> <p><code class="language-plaintext highlighter-rouge">click</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when an element is clicked</span>
<span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">oncontextmenu</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">contextmenu</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when an element is right-clicked</span>
<span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">dblclick</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">dblclick</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when an element is double-clicked</span>
<span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">mouseenter</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">mouseenter</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when an element is entered by the mouse arrow</span>
<span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">mouseleave</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">mouseleave</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when an element is exited by the mouse arrow</span>
<span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">mousemove</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">mousemove</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when the mouse is moved inside the element</span>
<span class="p">});</span>
</code></pre></div></div> <h3 id="keyboard-events">Keyboard Events</h3> <p><code class="language-plaintext highlighter-rouge">keydown</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">keydown</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when the user is pressing a key on the keyboard</span>
<span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">keypress</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">keypress</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when the user presses the key on the keyboard</span>
<span class="p">});</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">keyup</code></p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">element</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">keyup</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="c1">// Fired when the user releases a key on the keyboard</span>
<span class="p">});</span>
</code></pre></div></div> <h3 id="thank-you-for-reading">Thank you for reading</h3> <p>If you liked this post, subscribe to my <a href="https://abhirajbhowmick.substack.com" rel="dofollow">newsletter</a> to never miss out on my blogs, product launches, and tech news, and follow me on <a href="https://twitter.com/rainboestrykr">Twitter</a> for daily threads on web dev resources!</p>]]></content><author><name>Abhiraj Bhowmick</name></author><category term="web"/><category term="web-development"/><category term="beginners"/><summary type="html"><![CDATA[This is the go-to super guide/cheatsheet for beginner coders learing Javascript]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/158066053-34b1c462-70cb-4054-be5a-02a56d9df49c.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/158066053-34b1c462-70cb-4054-be5a-02a56d9df49c.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to build CLIs with React Ink</title><link href="https://genicsblog.com/dhruva/building-clis-with-react-ink" rel="alternate" type="text/html" title="How to build CLIs with React Ink"/><published>2022-03-10T00:00:00+00:00</published><updated>2022-03-10T00:00:00+00:00</updated><id>https://genicsblog.com/dhruva/building-clis-with-react-ink</id><content type="html" xml:base="https://genicsblog.com/dhruva/building-clis-with-react-ink"><![CDATA[<p>Yes, dear reader, you read that right! You can build beautiful CLIs with React using an awesome library called <a href="https://github.com/vadimdemedes/ink">React Ink</a>!</p> <p>The way this library works is best summed up by the README of the repo:</p> <blockquote> <p>Ink provides the same component-based UI building experience that React offers in the browser, but for command-line apps. It uses <a href="https://github.com/facebook/yoga">Yoga</a> to build Flexbox layouts in the terminal, so most CSS-like props are available in Ink as well. If you are already familiar with React, you already know Ink. Since Ink is a React renderer, it means that all features of React are supported. Head over to <a href="https://reactjs.org/">React</a> website for documentation on how to use it. Only Ink’s methods will be documented in this readme.</p> </blockquote> <h1 id="what-well-build-️">What we’ll build 🗓️</h1> <p>In this post, we’ll explore how Ink works by building a cool little CLI, that fetches info about pokemon using <a href="https://pokeapi.co/">PokeAPI</a>!</p> <h1 id="creating-an-ink-project-">Creating an Ink project 🪜</h1> <p>This is extremely simple and straight-forward.</p> <ul> <li>First you will create an empty directory</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>pokecli <span class="o">&amp;&amp;</span> <span class="nb">cd </span>pokecli
</code></pre></div></div> <ul> <li>Then you can run the <code class="language-plaintext highlighter-rouge">create-ink-app</code> command</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-ink-app <span class="nt">--typescript</span>
</code></pre></div></div> <p>In this post, I will use TypeScript, but you can follow along with plain JS too.</p> <p>If we take a look at what this command has generated, we can see a very basic file structure:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pokecli
	source/
	.editorconfig
	.gitattributes
	package-lock.json
	package.json
	readme.md
	tsconfig.json
</code></pre></div></div> <p>We can ignore everything other than the <code class="language-plaintext highlighter-rouge">source</code> folder.</p> <p><code class="language-plaintext highlighter-rouge">source/ui.tsx</code></p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">FC</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Text</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">ink</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">App</span><span class="p">:</span> <span class="nx">FC</span><span class="o">&lt;</span><span class="p">{</span> <span class="nx">name</span><span class="p">?:</span> <span class="kr">string</span> <span class="p">}</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Stranger</span><span class="dl">"</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nc">Text</span><span class="p">&gt;</span>
    Hello, <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">color</span><span class="p">=</span><span class="s">"green"</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">name</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
<span class="p">);</span>
<span class="kr">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">App</span><span class="p">;</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</code></pre></div></div> <p>This is a normal App component like you would see in plain React. A prop <code class="language-plaintext highlighter-rouge">name</code> is passed on to this component which is set to a default value of Stranger. And a message of “Hello, {name}” is rendered. Note that the <code class="language-plaintext highlighter-rouge">Text</code> component comes from <code class="language-plaintext highlighter-rouge">ink</code>.</p> <p>It can be used to style many aspects of the text, like the color, background color etc. <code class="language-plaintext highlighter-rouge">ink</code> uses a library called <a href="https://github.com/chalk/chalk">chalk</a> to do this.</p> <p><code class="language-plaintext highlighter-rouge">source/cli.tsx</code></p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#!/usr/bin/env node
</span><span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">render</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">ink</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">meow</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">meow</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./ui</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">cli</span> <span class="o">=</span> <span class="nx">meow</span><span class="p">(</span>
  <span class="s2">`
	Usage
	  $ pokecli
	Options
		--name  Your name
	Examples
	  $ pokecli --name=Jane
	  Hello, Jane
`</span><span class="p">,</span>
  <span class="p">{</span>
    <span class="na">flags</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">string</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">}</span>
<span class="p">);</span>
<span class="nx">render</span><span class="p">(&lt;</span><span class="nc">App</span> <span class="na">name</span><span class="p">=</span><span class="si">{</span><span class="nx">cli</span><span class="p">.</span><span class="nx">flags</span><span class="p">.</span><span class="nx">name</span><span class="si">}</span> <span class="p">/&gt;);</span>
</code></pre></div></div> <p>This file is the entry point of the CLI application. The <code class="language-plaintext highlighter-rouge">meow</code> function displays the text that will appear in the <code class="language-plaintext highlighter-rouge">--help</code> flag. And then it pulls the render function from <code class="language-plaintext highlighter-rouge">ink</code> to display the exported <code class="language-plaintext highlighter-rouge">App</code> component from <code class="language-plaintext highlighter-rouge">ui.tsx</code>. <code class="language-plaintext highlighter-rouge">name</code> is a command-line argument which can be set by the user like this:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pokecli <span class="nt">--name</span><span class="o">=</span>Charmander
</code></pre></div></div> <p>We can see that this arg has an explicit type of <code class="language-plaintext highlighter-rouge">string</code>. Since, we now have a basic understanding of how Ink works, let’s get on to creating our CLI!</p> <h1 id="running-the-cli-">Running the CLI 🏃</h1> <p>We can run this code by first compiling our source code into an executable</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run build
</code></pre></div></div> <p>And then running the executable:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pokecli <span class="nt">--name</span><span class="o">=</span>Charmander
</code></pre></div></div> <p>And we’ll be able to see our output!</p> <p><img src="https://i.imgur.com/ZjXGj8G.png" alt="https://i.imgur.com/ZjXGj8G.png"/></p> <p>You can also run pokecli with the <code class="language-plaintext highlighter-rouge">--help</code> flag to see the output of what’s passed to the <code class="language-plaintext highlighter-rouge">meow</code> function in <code class="language-plaintext highlighter-rouge">cli.tsx</code></p> <h1 id="building-our-cli-️">Building our CLI 🛠️</h1> <p>Let’s first make a simple function to fetch the data of a pokemon through it’s name, in <code class="language-plaintext highlighter-rouge">ui.tsx</code>.</p> <p>We will do this using a library called <a href="https://axios-http.com/">axios</a>.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i axios
</code></pre></div></div> <p>We can then use this function to send a request to PokeAPI.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// fetch pokemon data with its name using pokeapi</span>
<span class="kd">const</span> <span class="nx">pokemon</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="k">void</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">axios</span>
    <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="s2">`https://pokeapi.co/api/v2/pokemon/</span><span class="p">${</span><span class="nx">name</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()}</span><span class="s2">`</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">};</span>
</code></pre></div></div> <p>And if you test this out, we’ll be able to see the data associated with what is passed in the CLI name flag.</p> <p>The problem with this is that, TypeScript doesn’t know the properties that exist in this data object. So let’s declare interfaces for the API response.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">interface</span> <span class="nx">Type</span> <span class="p">{</span>
  <span class="nl">slot</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">type</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>
<span class="kr">interface</span> <span class="nx">Stat</span> <span class="p">{</span>
  <span class="nl">base_stat</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">effort</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">stat</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="p">};</span>
<span class="p">}</span>
<span class="kr">interface</span> <span class="nx">PokemonData</span> <span class="p">{</span>
  <span class="nl">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">weight</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">types</span><span class="p">:</span> <span class="nx">Type</span><span class="p">[];</span>
  <span class="nl">stats</span><span class="p">:</span> <span class="nx">Stat</span><span class="p">[];</span>
<span class="p">}</span>
</code></pre></div></div> <p>Ref:</p> <p><img src="https://i.imgur.com/V8GI4cC.png" alt="https://i.imgur.com/V8GI4cC.png"/></p> <p>Let’s also create a state variable to store our pokemon data:</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">pokemonData</span><span class="p">,</span> <span class="nx">setPokemonData</span><span class="p">]</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useState</span><span class="o">&lt;</span><span class="nx">PokemonData</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</code></pre></div></div> <p>Now, we can update our function to fetch the pokemon data accordingly:</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// fetch pokemon data with its name using pokeapi</span>
<span class="kd">const</span> <span class="nx">pokemon</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">):</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">PokemonData</span><span class="o">&gt;</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="s2">`https://pokeapi.co/api/v2/pokemon/</span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">axios</span>
    <span class="p">.</span><span class="kd">get</span><span class="p">&lt;</span><span class="nc">PokemonData</span><span class="p">&gt;</span>(url)
    .then((response: AxiosResponse<span class="p">&lt;</span><span class="nc">PokemonData</span><span class="p">&gt;</span>) =&gt; <span class="si">{</span>
      <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
    <span class="si">}</span>);
};
</code></pre></div></div> <p>Cool!</p> <p>Now let’s call this function in a <code class="language-plaintext highlighter-rouge">useEffect</code> hook:</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// call useEffect and use store the pokemon data in state</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">pokemon</span><span class="p">(</span><span class="nx">name</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="na">data</span><span class="p">:</span> <span class="nx">PokemonData</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setPokemonData</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">name</span><span class="p">]);</span>
</code></pre></div></div> <p>Awesome!</p> <p>Now all we have to do, is just render the data. Since our state will be <code class="language-plaintext highlighter-rouge">null</code> if the pokemon data is not yet set, we can use that as a loading indicator.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="p">(</span>
  <span class="p">(</span><span class="nx">pokemonData</span> <span class="o">&amp;&amp;</span>
    <span class="p">{</span>
      <span class="cm">/* pokemon stuff */</span>
    <span class="p">})</span> <span class="o">||</span> <span class="p">&lt;</span><span class="nc">Text</span><span class="p">&gt;</span>Loading...<span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div> <p>And then we can display the pokemon data:</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="p">(</span>
  <span class="p">(</span><span class="nx">pokemonData</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nc">Box</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Text</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">bold</span> <span class="na">color</span><span class="p">=</span><span class="s">"blue"</span><span class="p">&gt;</span>
          <span class="si">{</span><span class="nx">pokemonData</span><span class="p">?.</span><span class="nx">name</span><span class="p">[</span><span class="mi">0</span><span class="p">]?.</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="o">+</span> <span class="nx">pokemonData</span><span class="o">!</span><span class="p">.</span><span class="nx">name</span><span class="p">?.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="si">}</span>
        <span class="si">{</span><span class="cm">/* Display a divider */</span><span class="si">}</span>
        <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">color</span><span class="p">=</span><span class="s">"magentaBright"</span><span class="p">&gt;</span>
          <span class="si">{</span><span class="nb">Array</span><span class="p">(</span><span class="nx">pokemonData</span><span class="p">?.</span><span class="nx">name</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="s2">-</span><span class="dl">"</span><span class="p">)</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="si">}</span>
        <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">color</span><span class="p">=</span><span class="s">"yellowBright"</span><span class="p">&gt;</span>Metrics:<span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nc">Text</span>
          <span class="na">color</span><span class="p">=</span><span class="s">"greenBright"</span>
          <span class="na">bold</span>
        <span class="p">&gt;</span>
          <span class="si">{</span><span class="cm">/* Height is in decimeters */</span><span class="si">}</span>
          <span class="si">{</span><span class="nx">pokemonData</span><span class="o">!</span><span class="p">.</span><span class="nx">height</span> <span class="o">/</span> <span class="mi">10</span><span class="si">}</span>m, <span class="si">{</span><span class="nx">pokemonData</span><span class="o">!</span><span class="p">.</span><span class="nx">weight</span> <span class="o">/</span> <span class="mi">10</span><span class="si">}</span>kg
        <span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="si">}</span>
        <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">color</span><span class="p">=</span><span class="s">"yellowBright"</span><span class="p">&gt;</span>Type:<span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">color</span><span class="p">=</span><span class="s">"greenBright"</span> <span class="na">bold</span><span class="p">&gt;</span>
          <span class="si">{</span><span class="cm">/* Display the pokemon's types */</span><span class="si">}</span>
          <span class="si">{</span><span class="nx">pokemonData</span><span class="p">?.</span><span class="nx">types</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="kd">type</span><span class="p">:</span> <span class="nx">Type</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kd">type</span><span class="p">.</span><span class="kd">type</span><span class="p">.</span><span class="nx">name</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="s2">, </span><span class="dl">"</span><span class="p">)</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
        <span class="si">{</span><span class="dl">"</span><span class="se">\n\n</span><span class="dl">"</span><span class="si">}</span>
        <span class="si">{</span><span class="cm">/* Display the pokemon's stats */</span><span class="si">}</span>
        <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">color</span><span class="p">=</span><span class="s">"yellowBright"</span> <span class="na">bold</span><span class="p">&gt;</span>
          Stats<span class="si">{</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nc">Text</span> <span class="na">color</span><span class="p">=</span><span class="s">"greenBright"</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">pokemonData</span><span class="p">?.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">stat</span><span class="p">:</span> <span class="nx">Stat</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="s2">`</span><span class="p">${</span><span class="nx">stat</span><span class="p">.</span><span class="nx">stat</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">: </span><span class="p">${</span><span class="nx">stat</span><span class="p">.</span><span class="nx">base_stat</span><span class="p">}</span><span class="s2">`</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nc">Box</span><span class="p">&gt;</span>
  <span class="p">))</span> <span class="o">||</span> <span class="p">&lt;</span><span class="nc">Text</span><span class="p">&gt;</span>Loading...<span class="p">&lt;/</span><span class="nc">Text</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div> <p>Now you should be able to see this:</p> <p><img src="https://i.imgur.com/gSHipFy.gif" alt="https://i.imgur.com/gSHipFy.gif"/></p> <p>We can clear the terminal screen before the data is shown. There is an NPM library called <a href="https://www.npmjs.com/package/clear"><code class="language-plaintext highlighter-rouge">clear</code></a> which we can use to achieve this.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i clear
</code></pre></div></div> <p>Since it is written in JS, we’ll need the type definitions for it too.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i <span class="nt">-D</span> @types/clear
</code></pre></div></div> <p>Now, we can call the <code class="language-plaintext highlighter-rouge">clear</code> function above our JSX.</p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	<span class="nx">clear</span><span class="p">();</span>
	<span class="k">return</span> <span class="p">(</span>
		<span class="p">(</span><span class="nx">pokemonData</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
			<span class="p">&lt;</span><span class="nc">Box</span><span class="p">&gt;</span>
				<span class="p">&lt;</span><span class="nc">Text</span><span class="p">&gt;</span>
					<span class="p">&lt;</span><span class="nc">Text</span> <span class="na">bold</span> <span class="na">color</span><span class="p">=</span><span class="s">"blue"</span><span class="p">&gt;</span>
          ...
</code></pre></div></div> <p>Cool!</p> <p>You can also change the help text:</p> <p><code class="language-plaintext highlighter-rouge">cli.tsx</code></p> <div class="language-tsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">cli</span> <span class="o">=</span> <span class="nx">meow</span><span class="p">(</span>
  <span class="s2">`
	Usage
	  $ pokecli
	Options
		--name The name of the pokemon 
	Examples
	  $ pokecli --name=charmander
		Charmander
		----------
		Metrics: 0.6m, 8.5 kg
		Type: fire
		Stats
		hp: 39
		attack: 52
		defense: 43
		special-attack: 60
		special-defense: 50
		speed: 65
`</span><span class="p">,</span>
  <span class="p">{</span>
    <span class="na">flags</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">string</span><span class="dl">"</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">}</span>
<span class="p">);</span>
</code></pre></div></div> <h1 id="-final-output">📤 Final Output</h1> <p>After following with me, you should be able to see this!</p> <p><img src="https://i.imgur.com/5GiKwBQ.gif" alt="https://i.imgur.com/5GiKwBQ.gif"/></p> <p>You can find the source code for the repo <a href="https://github.com/carrotfarmer/pokecli">here</a>.</p> <p>Isn’t it cool how all the hooks and other React features work in a CLI? React sure is taking over the world 😉</p> <p>I’ll see you in the next post! 👋</p>]]></content><author><name>Dhruva Srinivas</name></author><category term="coding"/><category term="react"/><category term="tools"/><summary type="html"><![CDATA[Learn how to build CLI apps with React using React Ink 🧑‍💻]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1646482447361/58i2tPOdE.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1646482447361/58i2tPOdE.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Basics of E2E Testing &amp;amp; Quickstart Cypress with Next.js</title><link href="https://genicsblog.com/anurag/basics-of-e2e-testing-and-integrating-cypress-with-next-js" rel="alternate" type="text/html" title="Basics of E2E Testing &amp;amp; Quickstart Cypress with Next.js"/><published>2022-03-01T00:00:00+00:00</published><updated>2022-03-01T00:00:00+00:00</updated><id>https://genicsblog.com/anurag/e2e-testing-cypress-nextjs</id><content type="html" xml:base="https://genicsblog.com/anurag/basics-of-e2e-testing-and-integrating-cypress-with-next-js"><![CDATA[<h2 id="basics-of-e2e-testing-and-integrating-cypress-with-nextjs">Basics of E2E Testing and Integrating Cypress with Next.js</h2> <p>👋 Hello fellas! It’s been a while since I posted an article.</p> <p><img src="https://media.giphy.com/media/3ornk57KwDXf81rjWM/giphy.gif" alt="hello"/></p> <p>As developers, we always want to deliver the best products to users. And Testing is a crucial part of this process. One of the commonly used testing techniques is E2E testing.</p> <h2 id="-e2e-testing---the-basics">💡 E2E Testing - The Basics</h2> <p>End to End Testing (or E2E testing in short) is a technique that tests the entire software product from beginning to end to ensure the application flow behaves as expected.</p> <p>The main intent of E2E testing is to simulate the real user scenario and to test from the end user’s experience.</p> <h4 id="-benefits-of-e2e-testing">📃 Benefits of E2E Testing</h4> <ul> <li>Reduced Risks</li> <li>Increased Confidence</li> <li>Reduced Cost</li> </ul> <h3 id="-e2e-testing-methods">⚡ E2E testing methods</h3> <h4 id="horizontal-e2e-testing">Horizontal E2E testing</h4> <p>Horizontal Testing is done from the end user’s perspective. It evaluates whether the user can navigate the software and use its functions properly. It also helps to detect the bugs that might prevent the user from using some software functions.</p> <h4 id="vertical-e2e-testing">Vertical E2E Testing</h4> <p>This method refers to testing in layers, meaning that tests happen in sequential, hierarchical order. Each subcomponent of the system is tested from start to finish to ensure quality.</p> <p>It is mostly done when the system has no UI or the UI has a high level of technicality and is used to test critical components.</p> <h3 id="-how-to-perform-e2e-testing">❓ How to perform E2E Testing?</h3> <ul> <li>Analyze all the requirements. Have a clear idea about what the app is supposed to do.</li> <li>Set up a test environment as per the requirements.</li> <li>List down all the testing methods required to test these responses.</li> <li>Design the test cases.</li> <li>Run the tests and jot the results.</li> </ul> <h3 id="-e2e-testing-frameworks">⚡ E2E Testing Frameworks</h3> <p>E2E Testing frameworks are used to ensure that all the moving parts in an application is configured properly.</p> <p>Here are some of the most popular ones:</p> <ul> <li>Selenium</li> <li>Cypress</li> <li>Cucumber</li> <li>Testim</li> </ul> <p>Now that you are familiar with the basic concept of E2E Testing, let’s take a look at how to integrate E2E Testing using Cypress in Next.JS</p> <h2 id="-integration-of-cypress-with-nextjs-for-e2e-testing">👨‍💻 Integration of Cypress with Next.js for E2E Testing</h2> <blockquote> <p>Now that you’re familiar with the Basics of E2E Testing, let’s take a look at how to get started with Cypress in Next.js</p> </blockquote> <h4 id="nextjs">Next.JS</h4> <p>In case you are not familiar with Next.js, it’s a react framework packed with some extra features to help both developers and clients.</p> <h4 id="cypress">Cypress</h4> <p>Cypress is a test runner for E2E Testing for the web.</p> <h4 id="setting-up-the-project">Setting up the Project</h4> <p>You can use <code class="language-plaintext highlighter-rouge">create next-app</code> with the <code class="language-plaintext highlighter-rouge">cypress</code> example to get started quickly.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-next-app@latest <span class="nt">--example</span> with-cypress with-cypress-app 
</code></pre></div></div> <p>For existing projects, you can start off by installing the <code class="language-plaintext highlighter-rouge">cypress</code> package.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> cypress
</code></pre></div></div> <p>Then, add Cypress to the <code class="language-plaintext highlighter-rouge">scripts</code> section in the <code class="language-plaintext highlighter-rouge">package.json</code> file.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"next dev"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"next build"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"next start"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"cypress"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cypress open"</span><span class="p">,</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>Next, run cypress to generate examples that use their recommended folder structure.</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run cypress
</code></pre></div></div> <h4 id="creating-your-first-cypress-integration-test">Creating your first Cypress integration test</h4> <p>Let’s say you have two pages</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// pages/index.js</span>

<span class="k">import</span> <span class="nx">Link</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">next/link</span><span class="dl">'</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Home</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">nav</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Link</span> <span class="na">href</span><span class="p">=</span><span class="s">"/about"</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">a</span><span class="p">&gt;</span>About<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nc">Link</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">nav</span><span class="p">&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// pages/about.js</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">About</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>About Page<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div> <p>Then, to test that your navigation is working correctly:</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// cypress/integration/app.spec.js</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">Navigation</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should navigate to the about page</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// Start from the index page</span>
    <span class="nx">cy</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://localhost:3000/</span><span class="dl">'</span><span class="p">)</span>

    <span class="c1">// Find a link with an href attribute containing "about" and click it</span>
    <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">a[href*="about"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">click</span><span class="p">()</span>

    <span class="c1">// The new url should include "/about"</span>
    <span class="nx">cy</span><span class="p">.</span><span class="nx">url</span><span class="p">().</span><span class="nx">should</span><span class="p">(</span><span class="dl">'</span><span class="s1">include</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">/about</span><span class="dl">'</span><span class="p">)</span>

    <span class="c1">// The new page should contain an h1 with "About page"</span>
    <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">h1</span><span class="dl">'</span><span class="p">).</span><span class="nx">contains</span><span class="p">(</span><span class="dl">'</span><span class="s1">About Page</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">})</span>
<span class="p">})</span>
</code></pre></div></div> <p><strong>Tip</strong>: Instead of using <code class="language-plaintext highlighter-rouge">cy.visit('http://localhost:3000/')</code>, you can just use <code class="language-plaintext highlighter-rouge">cy.visit('/')</code> if you set the <code class="language-plaintext highlighter-rouge">baseUrl</code> to <code class="language-plaintext highlighter-rouge">http://localhost:3000</code> in the <code class="language-plaintext highlighter-rouge">cypress.json</code> config file.</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">cypress.json</span><span class="w"> 
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"baseUrl"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:3000"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>At this point, you will have a simple test setup. Since Cypress is testing a real Next.js application, it requires the Next.js server to be running prior to starting cypress.</p> <p>First Run <code class="language-plaintext highlighter-rouge">npm run build</code> and <code class="language-plaintext highlighter-rouge">npm run start</code>, then run <code class="language-plaintext highlighter-rouge">npm run cypress</code> in another terminal window to start Cypress.</p> <p>Now, cypress will start and you can view the results.</p> <h3 id="further-steps-for-continuous-integration-ci">Further steps for Continuous Integration (CI)</h3> <p>At this point, you will have noticed that running Cypress so far has opened an interactive browser which is not ideal for CI environments.</p> <p>You can run Cypress headlessly using the <code class="language-plaintext highlighter-rouge">cypress run</code> command.</p> <p>In the <code class="language-plaintext highlighter-rouge">package.json</code> file:</p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">//</span><span class="w"> </span><span class="err">package.json</span><span class="w">

</span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="err">//</span><span class="w"> </span><span class="err">...</span><span class="w">
  </span><span class="nl">"cypress"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cypress open"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"cypress:headless"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cypress run"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> <p>That’s it for this article! You can show your support by dropping some comments here!</p> <p><strong>About the Author</strong></p> <ul> <li><a href="https://anurag.tech">Portfolio</a></li> <li><a href="https://blog.anurag.tech">Blog</a></li> </ul>]]></content><author><name>anuragkr</name></author><category term="web"/><category term="next-js"/><category term="testing"/><summary type="html"><![CDATA[Learn the basics of E2E Testing using Cypress in your Next.js app from this start guide!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/156170962-605f6ce9-2924-411b-8d39-888c351d0ada.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/156170962-605f6ce9-2924-411b-8d39-888c351d0ada.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Solidity Quickstart [0]</title><link href="https://genicsblog.com/kira/solidity-quickstart-0" rel="alternate" type="text/html" title="Solidity Quickstart [0]"/><published>2022-02-27T00:00:00+00:00</published><updated>2022-02-27T00:00:00+00:00</updated><id>https://genicsblog.com/kira/solidity-quickstart-0</id><content type="html" xml:base="https://genicsblog.com/kira/solidity-quickstart-0"><![CDATA[<p>Hey folks 👀. Hope y’all are doing great. You might have heard about web3 and its hype on Twitter and maybe you wanna explore it as well.</p> <p>Well, so today I am here to give all a quick tour of solidity 🚀. So let’s get started.</p> <p><strong>NOTE</strong>: This blog post isn’t a complete tutorial of solidity. You can take this blog post as a quickstart for the journey with solidity and web3.</p> <p>If you are in search of resources, checkout the resources notion page of <a href="https://links.kiradev.co/misc/solidity-resources">X Days of Solidity</a>.</p> <p><img src="https://c.tenor.com/Q8VheZPaZM4AAAAM/stocks-amc.gif" alt=""/></p> <h1 id="-whats-solidity">🤔 What’s Solidity?</h1> <p>Solidity is a programming language for implementing smart contracts.</p> <p>Smart contracts are simply programs stored on a blockchain that run when predetermined conditions are met.</p> <p>An advantage of these programs is that you can verify they are what they are and do what they claim they are doing.</p> <p>This allows for a permission-less autonomous ecosystem between untrusted and anonymous stakeholders.</p> <p>Solidity is a curly-bracket language with the influence of C++, Python, and JavaScript being visible.</p> <p>Enough of theory, now let’s dive into solidity 🚀</p> <h1 id="-setting-up-developer-environment">🛠 Setting up developer environment</h1> <p>Before working with Solidity, we would have to set up our development environment in such a way that we could local test them 🚀.</p> <h2 id="-magical-powers-of-hardhat">👀 Magical powers of Hardhat</h2> <p>We would be using a tool called <a href="https://hardhat.org/">Hardhat</a>. This would create a local Ethereum network and give us fake test ETH and fake test accounts to work with. Sounds interesting right?</p> <p>So what are you waiting for? let’s set up Hardhat 🚀.</p> <ul> <li>Create a new folder for the project <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>x-days-of-solidity
</code></pre></div> </div> </li> <li>Navigate into that folder <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>x-days-of-solidity
</code></pre></div> </div> </li> <li>Initializing the project <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm init <span class="nt">-y</span>
</code></pre></div> </div> <ul> <li>If you get an error saying <code class="language-plaintext highlighter-rouge">npm command not found</code> then go ahead and install <a href="https://nodejs.org">NodeJS</a>. Install the LTS version</li> </ul> </li> <li> <p>Installing Hardhat</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npx hardhat
</code></pre></div> </div> <p>You would be presented with a prompt something like this</p> <p><img src="https://imgur.com/uiEFO9U.png" alt=""/></p> <p>Let’s choose the first option and press enter for the rest of the options</p> </li> <li> <p>We would have to install a few other dependencies as well</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">--save-dev</span> chai ethereum-waffle @nomiclabs/hardhat-waffle ethers @nomiclabs/hardhat-ethers
</code></pre></div> </div> <p><a href="https://npmjs.com/package/chai"><code class="language-plaintext highlighter-rouge">chai</code></a> is a testing library.</p> <p><a href="https://npmjs.com/package/ethereum-waffle"><code class="language-plaintext highlighter-rouge">ethereum-waffle</code></a> is the waffle package by which you can test your smart contracts.</p> <p><a href="https://npmjs.com/package/@nomiclabs/hardhat-waffle"><code class="language-plaintext highlighter-rouge">@nomiclabs/hardhat-waffle</code></a> allows to test smart contracts using waffle and hardhat.</p> <p><a href="https://npmjs.com/package/ethers"><code class="language-plaintext highlighter-rouge">ethers</code></a> is a library for complete Ethereum wallet implementation.</p> <p><a href="https://npmjs.com/package/@nomiclabs/hardhat-ethers"><code class="language-plaintext highlighter-rouge">@nomiclabs/hardhat-ethers</code></a> is a hardhat plugin for ethers.</p> </li> </ul> <h1 id="-folder-structure">📁 Folder structure</h1> <p>After you have completed setting up the developer environment you would see a folder structure similar to this</p> <p><img src="https://imgur.com/A0vtJBO.png" alt=""/></p> <ul> <li><code class="language-plaintext highlighter-rouge">contracts</code> is the folder where all our smart contracts would be stored.</li> <li><code class="language-plaintext highlighter-rouge">scripts</code> is the folder where all scripts such as <code class="language-plaintext highlighter-rouge">run.js</code> and <code class="language-plaintext highlighter-rouge">deploy.js</code> would be stored.</li> <li><code class="language-plaintext highlighter-rouge">test</code> is the folder where all our chai tests would be stored.</li> </ul> <h1 id="-hello-world">👋 Hello, World!</h1> <p>Let’s get started by creating a smart contract using solidity that prints “Hello, World!” in the terminal</p> <p><img src="https://c.tenor.com/cX92mi1p-NYAAAAd/coding-anime.gif" alt=""/></p> <p>First of all let’s clean up the default hardhat contract, script, and test files. Let’s create a new file called <code class="language-plaintext highlighter-rouge">HelloWorld.sol</code> inside the <code class="language-plaintext highlighter-rouge">contracts</code> folder.</p> <p>Let’s get started by adding a ✨SPDX License Identifier✨. It’s just a fancy comment, which tells the license of your smart contract.</p> <p>In my case, I am going to be using the <a href="https://opensource.org/licenses/MIT">MIT</a> license.</p> <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SPDX-License-Identifier: MIT
</span></code></pre></div></div> <p>Let’s now specify the the version of solidity compiler. As we are using Hardhat, we have to check that the solidity compiler version in the <code class="language-plaintext highlighter-rouge">hardhat.config.js</code> file is the same as we are specifying in our smart contract</p> <p><img src="https://imgur.com/NpxKuG4.png" alt=""/></p> <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">4</span><span class="p">;</span>
</code></pre></div></div> <p>As solidity doesn’t natively support “console logs” we would have to use the magical powers of Hardhat again. Hardhat allows use to use “console logs” in solidity.</p> <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="s">"hardhat/console.sol"</span>
</code></pre></div></div> <p>Now we have the superpowers to use console log in solidity. This makes debugging much simpler.</p> <p><img src="https://imgur.com/jxQdvKZ.png" alt=""/></p> <p>Let’s now start writing the actual smart contract 👀. In solidity, the syntax of a smart contract is similar to classes in other programming languages.</p> <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">contract</span> <span class="n">HelloWorld</span> <span class="p">{</span>
    <span class="k">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">console</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="s">"Hello, World"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>We use the <code class="language-plaintext highlighter-rouge">contract</code> keyword along with the contract name to define a contract. Defining a contract is similar to defining a class in other programming languages like JavaScript.</p> <p>Any code inside the <code class="language-plaintext highlighter-rouge">constructor</code> is run once when the contract is been deployed.</p> <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SPDX-License-Identifier: MIT
</span>
<span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"hardhat/console.sol"</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">HelloWorld</span> <span class="p">{</span>
    <span class="k">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">console</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="s">"Hello, World"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p><strong>TADA</strong> 🎉! We have written our first smart contract. But 🤔 How to run it locally?</p> <h1 id="-running-smart-contract-locally">⚙ Running smart contract locally</h1> <p>We would use creating a script (<code class="language-plaintext highlighter-rouge">run.js</code>) and run the smart contract using that script and Hardhat.</p> <p>Create a new file called <code class="language-plaintext highlighter-rouge">run.js</code> under the <code class="language-plaintext highlighter-rouge">scripts</code> folder.</p> <p>Let’s first get our smart contract, compile it, and generate all the necessary files under the <code class="language-plaintext highlighter-rouge">artifact</code> folder.</p> <blockquote> <p><code class="language-plaintext highlighter-rouge">artifact</code> folder is similar to a <code class="language-plaintext highlighter-rouge">build</code> folder</p> </blockquote> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">helloWorldFactory</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">hre</span><span class="p">.</span><span class="nx">ethers</span><span class="p">.</span><span class="nx">getContractFactory</span><span class="p">(</span><span class="dl">'</span><span class="s1">HelloWorld</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div> <p>Let’s now deploy our compiled smart contract to the local blockchain</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">helloWorld</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">waveContractFactory</span><span class="p">.</span><span class="nx">deploy</span><span class="p">();</span>
</code></pre></div></div> <p>We will wait until our smart contract has been officially deployed on the local blockchain.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">await</span> <span class="nx">waveContract</span><span class="p">.</span><span class="nx">deployed</span><span class="p">();</span>
</code></pre></div></div> <p>We would only see the “Hello, World!” console log only after the smart contract has been officially deployed on the local blockchain because the code inside <code class="language-plaintext highlighter-rouge">constructor</code> only runs once when the smart contract has been deployed.</p> <p>Let’s add a console log to the run script which tells the address of the account where our smart contract has been deployed.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Contract deployed to:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">helloWorld</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
</code></pre></div></div> <p>Finally, our <code class="language-plaintext highlighter-rouge">run.js</code> script would look something like this</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">main</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">helloWorldFactory</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">hre</span><span class="p">.</span><span class="nx">ethers</span><span class="p">.</span><span class="nx">getContractFactory</span><span class="p">(</span><span class="dl">'</span><span class="s1">HelloWorld</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">helloWorld</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">helloWorldFactory</span><span class="p">.</span><span class="nx">deploy</span><span class="p">();</span>
  <span class="k">await</span> <span class="nx">helloWorld</span><span class="p">.</span><span class="nx">deployed</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Contract deployed to:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">helloWorld</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">runMain</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">await</span> <span class="nx">main</span><span class="p">();</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="nx">runMain</span><span class="p">();</span>
</code></pre></div></div> <p>I have added a new <code class="language-plaintext highlighter-rouge">runMain</code> function that would catch errors while deploying</p> <p>Now let’s run it using <code class="language-plaintext highlighter-rouge">npx hardhat run scripts/run.js</code> command</p> <p>You would see the output something like this</p> <p><img src="https://imgur.com/XjP2Dlx.png" alt=""/></p> <p><strong>TADA</strong> 🎉! You have created a smart contract and deployed it as well</p> <p>Let’s talk more about solidity now 🤔.</p> <h1 id="-data-types-in-solidity">📦 Data types in Solidity</h1> <h2 id="-integers">🔢 Integers</h2> <p>In solidity, there are two types of integers unsigned integers (<code class="language-plaintext highlighter-rouge">uint</code>) and signed integers (<code class="language-plaintext highlighter-rouge">int</code>).</p> <p>Unsigned integers are non-negative integers whereas signed integers are negative integers (PS: <code class="language-plaintext highlighter-rouge">**</code> means to the “to the power of” or “exponent operator” aka <code class="language-plaintext highlighter-rouge">^</code> )</p> <ul> <li><code class="language-plaintext highlighter-rouge">uint8</code> ranges from 0 to 2 ** 8 - 1</li> <li><code class="language-plaintext highlighter-rouge">uint16</code> ranges from 0 to 2 ** 16 - 1</li> <li><code class="language-plaintext highlighter-rouge">uint256</code> or <code class="language-plaintext highlighter-rouge">uint</code> ranges from 0 to 2 ** 256 - 1</li> <li><code class="language-plaintext highlighter-rouge">int8</code> ranges from -2 ** 8 to 2 ** 8 - 1</li> <li><code class="language-plaintext highlighter-rouge">int16</code> ranges from -2 ** 16 to 2 ** 16 - 1</li> <li><code class="language-plaintext highlighter-rouge">int256</code> or <code class="language-plaintext highlighter-rouge">int256</code> ranges from -2 ** 256 to 2 ** 256 - 1</li> </ul> <h2 id="-address">📍 Address</h2> <p>There is a special data type, “Address”. Address is a 20 byte long (size of an ethereum wallet address) data type in solidity.</p> <h2 id="-array">🏹 Array</h2> <p><strong>Syntax</strong>:</p> <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">data</span> <span class="k">type</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">array</span> <span class="n">name</span><span class="o">&gt;</span><span class="p">[</span><span class="n">size</span><span class="p">]</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">initialization</span><span class="o">&gt;</span>
</code></pre></div></div> <p>In solidity, you can create a fixed (with only a specific length) and dynamic (the length of the array can be anything)</p> <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// An array of fixed length of 10 unassigned integers
</span><span class="kt">uint</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="n">myFixedArray</span><span class="p">;</span>

<span class="c1">// An array of the dynamic length of strings
</span><span class="kt">string</span><span class="p">[]</span> <span class="n">myDynamicArray</span><span class="p">;</span>
</code></pre></div></div> <h3 id="-array-operations">✨ Array operations</h3> <p>Let’s now talk a look at the array operation in solidity 👀</p> <ol> <li> <p><strong>Accessing an element from an array</strong>: Accessing an element from an array in solidity is just like in any other programming language</p> <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// SPDX-License-Identifier: MIT
</span>
 <span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

 <span class="k">import</span> <span class="s">"hardhat/console.sol"</span><span class="p">;</span>

 <span class="k">contract</span> <span class="n">AccessingElement</span> <span class="p">{</span>
     <span class="kt">string</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="s">"hi"</span><span class="p">,</span> <span class="s">"hello"</span><span class="p">,</span> <span class="s">"yo"</span><span class="p">];</span>

     <span class="k">constructor</span><span class="p">()</span> <span class="p">{</span>
         <span class="n">console</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
     <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div> </div> <p>Here are creating a fixed array of name <code class="language-plaintext highlighter-rouge">data</code> and data type <code class="language-plaintext highlighter-rouge">string</code> and length of 3. We are trying to console log the second element of the array, which is <code class="language-plaintext highlighter-rouge">hello</code>.</p> <p>Let’s try to run it now using <code class="language-plaintext highlighter-rouge">npx hardhat scripts/run.js</code></p> <p><strong>NOTE</strong>: You need to change the name of the smart contract which you are compiling in the <code class="language-plaintext highlighter-rouge">scripts/run.js</code> file.</p> <p><strong>TADA</strong> 🎉! It worked</p> <p><img src="https://imgur.com/BJAdYkw.png" alt=""/></p> </li> <li> <p><strong>Assigning values</strong>: Let’s now assign values to an array</p> <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SPDX-License-Identifier: MIT
</span>
<span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

<span class="k">import</span> <span class="s">"hardhat/console.sol"</span><span class="p">;</span>

<span class="k">contract</span> <span class="n">AssigningValues</span> <span class="p">{</span>
    <span class="kt">string</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="s">"hi"</span><span class="p">,</span> <span class="s">"hello"</span><span class="p">,</span> <span class="s">"yo"</span><span class="p">];</span>

    <span class="k">constructor</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="s">"yo yo"</span><span class="p">;</span>
        <span class="n">console</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> </div> <p>Here we are trying to assign the value of the 4th element of the array as <code class="language-plaintext highlighter-rouge">yo yo</code>.</p> <p>Let’s test it out.</p> <p><strong>TADA</strong> 🎉! It worked</p> <p><img src="https://imgur.com/wkZ2QJO.png" alt=""/></p> </li> <li> <p><strong>Length of an array</strong>: Let’s now find the length of an array.</p> <p>You can use the <code class="language-plaintext highlighter-rouge">length</code> method to get the length of an array. Similar to how to find the length of an array in JavaScript.</p> <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// SPDX-License-Identifier: MIT
</span>
 <span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

 <span class="k">import</span> <span class="s">"hardhat/console.sol"</span><span class="p">;</span>

 <span class="k">contract</span> <span class="n">ArrayLength</span> <span class="p">{</span>
     <span class="kt">string</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="s">"hi"</span><span class="p">,</span> <span class="s">"hello"</span><span class="p">,</span> <span class="s">"yo"</span><span class="p">];</span>

     <span class="k">constructor</span><span class="p">()</span> <span class="p">{</span>
         <span class="n">console</span><span class="p">.</span><span class="n">log</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
     <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div> </div> <p>Let’s test it out</p> <p><strong>TADA</strong> 🎉 It worked</p> <p><img src="https://imgur.com/8zp2weM.png" alt=""/></p> </li> <li> <p><strong>Push</strong>: Push is used to add elements to the end of a dynamic array.</p> <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// SPDX-License-Identifier: MIT
</span>
 <span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

 <span class="k">import</span> <span class="s">"hardhat/console.sol"</span><span class="p">;</span>

 <span class="k">contract</span> <span class="n">AddingElement</span> <span class="p">{</span>
     <span class="kt">string</span><span class="p">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="s">"hi"</span><span class="p">,</span> <span class="s">"hello"</span><span class="p">,</span> <span class="s">"yo"</span><span class="p">];</span>

     <span class="k">constructor</span><span class="p">()</span> <span class="p">{</span>
         <span class="n">data</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="s">"yo yo"</span><span class="p">);</span>
     <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div> </div> </li> <li> <p><strong>Pop</strong>: Pop is used to remove the last element from a dynamic array</p> <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// SPDX-License-Identifier: MIT
</span>
 <span class="k">pragma</span> <span class="n">solidity</span> <span class="o">^</span><span class="mf">0.8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>

 <span class="k">import</span> <span class="s">"hardhat/console.sol"</span><span class="p">;</span>

 <span class="k">contract</span> <span class="n">AddingElement</span> <span class="p">{</span>
     <span class="kt">string</span><span class="p">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="s">"hi"</span><span class="p">,</span> <span class="s">"hello"</span><span class="p">,</span> <span class="s">"yo"</span><span class="p">];</span>

     <span class="k">constructor</span><span class="p">()</span> <span class="p">{</span>
         <span class="n">data</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
     <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div> </div> </li> </ol> <p>Phew, that was long 😓</p> <h2 id="-structs">🗜 Structs</h2> <p>Structs are more complex data types, where you can combine multiple data types to create your own complex data type.</p> <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">myStruct</span> <span class="o">=</span> <span class="p">{</span>
  <span class="kt">address</span> <span class="n">myAddress</span><span class="p">;</span>
  <span class="kt">uint</span> <span class="n">myNumber</span><span class="p">;</span>
  <span class="kt">string</span> <span class="n">myName</span>
<span class="p">}</span>
</code></pre></div></div> <p>We can use structs with arrays too!</p> <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">Person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="kt">string</span> <span class="n">name</span><span class="p">;</span>
  <span class="kt">uint</span> <span class="n">age</span>
<span class="p">}</span>

<span class="n">Person</span><span class="p">[]</span> <span class="n">personArray</span><span class="p">;</span> <span class="c1">// Creates a dynamic array
</span>
<span class="n">Person</span> <span class="n">james</span> <span class="o">=</span> <span class="n">Person</span><span class="p">(</span><span class="s">"James"</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span> <span class="c1">// Creates a new Person
</span>
<span class="n">personArray</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">james</span><span class="p">);</span> <span class="c1">// Adds that new person to the `personArray` array
</span></code></pre></div></div> <h1 id="-variables-in-solidity">🔤 Variables in Solidity</h1> <p><strong>Syntax</strong>:</p> <div class="language-solidity highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">data</span><span class="o">-</span><span class="k">type</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">access</span><span class="o">-</span><span class="k">modifier</span><span class="o">&gt;</span> <span class="o">&lt;</span><span class="n">variable</span><span class="o">-</span><span class="n">name</span><span class="o">&gt;</span><span class="p">;</span>
</code></pre></div></div> <h2 id="-types-of-variables">🌀 Types of variables</h2> <p>In solidity, there are 3 different types of variables:</p> <ol> <li><code class="language-plaintext highlighter-rouge">state</code>: State variables are declared in contract scope. Stored on the blockchain.</li> <li><code class="language-plaintext highlighter-rouge">local</code>: Local variables are declared inside functions. Destroyed after execution and not stored on the blockchain.</li> <li><code class="language-plaintext highlighter-rouge">global</code>: Global variables are some special variables that can be used globally and give information about the transactions and blockchain properties.</li> </ol> <h2 id="-variable-modifiers">✨ Variable modifiers</h2> <p>There are 2 variable modifiers for <code class="language-plaintext highlighter-rouge">state</code> variables</p> <ul> <li><code class="language-plaintext highlighter-rouge">constant</code>, disallow assignment (except initialization), does not occupy storage slot.</li> <li><code class="language-plaintext highlighter-rouge">immutable</code>, allows exactly one assignment at construction time and is constant afterward. Is stored in code.</li> </ul> <h1 id="-the-end">👋 The End</h1> <p>That’s the end folks 👋. I would be releasing another part on “Solidity Quickstart” on “Functions in Solidity” and “How to deploy the smart contract to a test net”, such as <a href="https://www.rinkeby.io/">Rinkeby</a></p> <p>The code for this entire “Solidity Quickstart” series would be available on <a href="https://github.com/kira272921/solidity-quickstart">my GitHub</a>.</p>]]></content><author><name>Kira</name></author><category term="web3"/><category term="beginners"/><category term="blockchain"/><summary type="html"><![CDATA[Get started with your web3 journey by learning the solidity language, used to create smart contracts on the blockchain 🚀]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/156168666-85804b30-d9db-4d0e-9433-4a668d42f65c.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/156168666-85804b30-d9db-4d0e-9433-4a668d42f65c.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Privacy friendly website analytics with Umami and Next.js</title><link href="https://genicsblog.com/anishde12020/privacy-friendly-website-analytics-with-umami-and-next-js" rel="alternate" type="text/html" title="Privacy friendly website analytics with Umami and Next.js"/><published>2022-02-20T00:00:00+00:00</published><updated>2022-02-20T00:00:00+00:00</updated><id>https://genicsblog.com/anishde12020/privacy-friendly-website-analytics-with-umami-and-next-js</id><content type="html" xml:base="https://genicsblog.com/anishde12020/privacy-friendly-website-analytics-with-umami-and-next-js"><![CDATA[<p>Website analytics is truly a very important thing. We can understand our audience well and can tailor our content to our audience for higher engagement.</p> <p><a href="https://analytics.google.com/">Google Analytics</a> had always been the go-to solution as it is popular, easy to set up, and gives a lot of data.</p> <p>However, Google Analytics has got its own set of issues. One must ask for a cookie consent to use Google Analytics as Google Analytics uses cookies. The Google Analytics script is also quite big and is known to slow down websites.</p> <p>There have been recent allegations against Google Analytics for not being privacy-friendly and many European authorities have also <a href="https://techcrunch.com/2022/02/10/cnil-google-analytics-gdpr-breach/">found it breaching GDPR</a>.</p> <p>So, what is the solution?</p> <p>Over the years, many privacy-friendly analytics solutions have emerged including <a href="https://usefathom.com/">Fathom Analytics</a>, <a href="https://plausible.io/">Plausible Analytics</a>, and <a href="https://umami.is/">Umami Analytics</a>.</p> <p>The last 2 are open-source and all 3 of them are cookie-less and have a lightweight script that should not affect website load times.</p> <p>We are going to be focusing on Umami in this article.</p> <h2 id="a-little-bit-about-umami">A little bit about Umami</h2> <p>Umami is an open-source self-hosted analytics service. This means the source code can be accessed by anyone and one must host it themselves.</p> <p>Now, you might say that this costs money and it is not free but today we are going to look at how we can host it for free. Also, Umami uses NextJS API routes for the backend and hence it can run on any serverless architecture.</p> <p>We are going to be looking at setting it up on <a href="https://railway.app/">Railway</a> today, however, it can also be hosted on <a href="https://vercel.com/dashboard">Vercel</a> or <a href="https://www.netlify.com/">Netlify</a>. We are also going to look at adding analytics to a Next.js application.</p> <p>You can see a <a href="https://app.umami.is/share/8rmHaheU/umami.is">live demo of the platform here</a></p> <p>Fun fact: <a href="https://hashnode.com/">Hashnode</a> also uses Umami and is rolling out an Umami dashboard as advanced analytics 😎</p> <p>You can see the <a href="https://stats.hashnode.com/share/VDldVSkU/9f4dd26c-c7e6-4fa1-88aa-87d90a0dba43">public analytics for my blog here</a></p> <h2 id="hosting-umami-for-free-on-railway">Hosting Umami for free on Railway</h2> <p><a href="https://railway.app/">Railway</a> is an awesome hosting platform that lets you host applications quickly and easily. The free plan allows usage of up to $5/month which should be good enough for a few small to medium-sized websites.</p> <p>In fact, I have been using it for the past 3-4 months and it has been an amazing experience. My usage costs are usually lower than $2/month and hence I have never paid anything. You don’t even need to link your credit card!</p> <p>My usage this month (3 websites) -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645083158123/UEZNXrJL_.png" alt="image.png"/></p> <p>You can also link a credit card to get $10 of usage per month for free (you will be charged for anything above that).</p> <p>You can sign up <a href="https://railway.app?referralCode=AnishDe12020">here</a></p> <h3 id="setting-up-the-project-on-railway">Setting up the project on Railway</h3> <p>We are going to follow the <a href="https://umami.is/docs/running-on-railway">official guide on hosting it on Railway</a></p> <p>First of all, we must fork the repository. This will help us make changes to the source code to fit our own needs and more importantly, receive updates in the future (as we will see later in the tutorial). Head over to the <a href="https://github.com/mikecao/umami">Umami GitHub repository</a> and click on fork on the top-right corner -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645084023444/UIfe4bLPm.png" alt="image.png"/></p> <p>You may be asked to select your personal account or an organization if you are in any. I would recommend going for personal account unless it is for an organization.</p> <p>Once you have signed up for an account, click on “New Project” (note that I already have an existing project and hence the layout looks like this. It may be different for you) -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645083729581/NrhvEnIUM.png" alt="image.png"/></p> <p>Now, select “Deploy from Repo” on the new project screen -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645084230742/IsU6U7Fb2.png" alt="image.png"/></p> <p>Do note that if you didn’t sign up with GitHub, you will be prompted to connect your GitHub account.</p> <p>Search and select Umami there.</p> <p>Make sure that the master branch has been selected. Now click on deploy -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645085133125/PEO4Np0hp.png" alt="image.png"/></p> <p>This might take some time (2-5 minutes).</p> <p>This is how it should look like after deploying (do note that I am currently using the Metro UI and the layout might look a little different) -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645085314989/SGu2FefSM.png" alt="image.png"/></p> <p>Now, we need to add a database. We are going to be using PostgreSQL for this example. Now, Railway has built-in support for databases and hence we can spin up a PostgreSQL instance within Railway itself for free.</p> <p>Click on this “New” button -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645085285069/quu1-MwRS.png" alt="image.png"/></p> <p>Select “Databases” and then select “PostgreSQL” -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645085252955/_pxkdwdGj.png" alt="image.png"/></p> <p>This might take some time as well.</p> <p>Do note that if you are using the old UI, you have to select the “Add Plugin” button.</p> <p>Now, we need to add two environment variables, <code class="language-plaintext highlighter-rouge">PORT</code> and <code class="language-plaintext highlighter-rouge">HASH_SALT</code>. Click on the card that says “umami” and go to the “Variables” tab -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645085586275/6b3hX2IJX.png" alt="image.png"/></p> <p>In the old UI, there will be a button called “Variables” in the sidebar. Click that and then add the following variables under “custom”.</p> <p>We need to put a random string for the <code class="language-plaintext highlighter-rouge">HASH_SALT</code> environment variable. Use any random string generator like <a href="https://devkit.one/generators/random-string">this one</a>. Let us go with 20 characters including uppercase and lowercase letters, numbers, and symbols -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645086073622/Oaa9dkb2U.png" alt="image.png"/></p> <p>Now paste that into Railway and click “Add” -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645086092990/Z5TMAndNtH.png" alt="image.png"/></p> <p>Also, add an environment variable called <code class="language-plaintext highlighter-rouge">PORT</code> and set it to <code class="language-plaintext highlighter-rouge">3000</code> -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645086013249/TBX1KtxPZ.png" alt="image.png"/></p> <p>Note that Railway will redeploy our application every time we add an environment variable.</p> <h3 id="setting-up-our-database-schema">Setting up our database schema</h3> <p>Now, we need to make tables in our database. For this, we need to locally clone the project. Go ahead and clone it with git and open a terminal in that repository (I am using the GitHub CLI to clone here but you can use <code class="language-plaintext highlighter-rouge">git</code> as well) -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645086274311/ESnkCPq02.png" alt="image.png"/></p> <p>Now, we need to <a href="https://docs.railway.app/develop/cli">install the Railway CLI</a>. You can install it with NPM with the following command -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i <span class="nt">-g</span> @railway/cli
</code></pre></div></div> <p>You can also install it with <a href="https://brew.sh/">Homebrew</a> with the following command -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>railwayapp/railway/railway
</code></pre></div></div> <p>Now run the following command to authenticate the CLI with your Railway account -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>railway login
</code></pre></div></div> <p>Note that if you face any issues while doing this, you can also try logging in with the following command -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>railway login <span class="nt">--browserless</span>
</code></pre></div></div> <p>Now run the following command to link the local directory with your Railway project -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>railway <span class="nb">link</span>
</code></pre></div></div> <p>Now head over to Railway and click the PostgreSQL card and go to the “Variables” tab -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645086844780/5Z7sCtfB6.png" alt="image.png"/></p> <p>Now run the following command in the terminal -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>railway run psql <span class="nt">-h</span> PGHOST <span class="nt">-U</span> PGUSER <span class="nt">-d</span> PGDATABASE <span class="nt">-f</span> sql/schema.postgresql.sql
</code></pre></div></div> <p>Replace the values caps with their corresponding values from the Railway dashboard (from the environment variables tab for PostgreSQL from the previous step)</p> <p>Now press enter to run the command.</p> <p>Do note that you need the PostgreSQL CLI for this. If you don’t have it, you can follow <a href="https://www.timescale.com/blog/how-to-install-psql-on-mac-ubuntu-debian-windows/">this guide to install it</a>.</p> <p>Now run the following command to deploy it -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>railway up
</code></pre></div></div> <p>Hooray, we have successfully deployed Umami 🥳</p> <h2 id="using-umami">Using Umami</h2> <p>After deploying, you will get an URL to deployment logged on to your CLI. You can also retrieve this URL from the Railway web app.</p> <p>You can also set up a custom subdomain (or even a custom domain) from the Umami dashboard -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645087633934/7mcDLz429.png" alt="image.png"/></p> <p>You will see a login screen now. The username is “admin” and the default password is “umami” (we will change this).</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645087925651/mO7f7rbEO.png" alt="image.png"/></p> <p>Our dashboard should look like this now -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645087905782/XJLyLBPL1.png" alt="image.png"/></p> <p>Now, there is a banner saying there is a new version out! While writing this tutorial, <a href="https://github.com/mikecao">Mikecao</a>, the creator of Umami, pushed a new version 😅</p> <p>Now, that is a good thing because now I get to show you how to update Umami 😎</p> <p>Before that, let us just quickly change our password as “umami” isn’t a secure password.</p> <p>Head over to Settings –&gt; Profile and click on “Change Password”</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645088278499/VheBGhUUXY.png" alt="image.png"/></p> <p>Enter “umami” in the “Current Password” field and then set a new secure password and click “Save” -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645088387324/VmfJRvZft.png" alt="image.png"/></p> <h3 id="updating-umami">Updating Umami</h3> <p>Head over to the forked Umami repository on GitHub. You should see that our branch is behind by a few commits -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645088470198/r7hgqcKVi.png" alt="image.png"/></p> <p>Click on “Fetch Upstream” and then “Fetch and merge” -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645088510722/8sBS4wExL.png" alt="image.png"/></p> <p>That is it! A new deployment will be initiated on Railway and in a few minutes, you should be up and running the latest version -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645088575876/UhIEb2SZl.png" alt="image.png"/></p> <h2 id="adding-umami-to-a-nextjs-website">Adding Umami to a NextJS website</h2> <p>Now, let us look at adding Umami to a NextJS website. For this let us first create a new NextJS application (note that it will work with existing NextJS applications as well) -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-next-app umami-tutorial
</code></pre></div></div> <p>Let us now move into that directory -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>umami-tutorial
</code></pre></div></div> <p>Now, open it in your favorite text editor. We will be using VSCode for this tutorial -</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>code <span class="nb">.</span>
</code></pre></div></div> <p>Now, open the <code class="language-plaintext highlighter-rouge">pages/_app.js</code> file. It should look like this -</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="dl">'</span><span class="s1">../styles/globals.css</span><span class="dl">'</span>

<span class="kd">function</span> <span class="nx">MyApp</span><span class="p">({</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">pageProps</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Component</span> <span class="si">{</span><span class="p">...</span><span class="nx">pageProps</span><span class="si">}</span> <span class="p">/&gt;</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyApp</span>
</code></pre></div></div> <p>Now, let us add the script tag for Umami. This is how our <code class="language-plaintext highlighter-rouge">_app.js</code> should look like now -</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">Script</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">next/script</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="dl">"</span><span class="s2">../styles/globals.css</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">MyApp</span><span class="p">({</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">pageProps</span> <span class="p">})</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;&gt;</span>
      <span class="si">{</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_UMAMI_SCRIPT_URL</span> <span class="o">&amp;&amp;</span>
        <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_UMAMI_WEBSITE_ID</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
          <span class="p">&lt;</span><span class="nc">Script</span>
            <span class="na">src</span><span class="p">=</span><span class="si">{</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_UMAMI_SCRIPT_URL</span><span class="si">}</span>
            <span class="na">data-website-id</span><span class="p">=</span><span class="si">{</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_UMAMI_WEBSITE_ID</span><span class="si">}</span>
            <span class="na">strategy</span><span class="p">=</span><span class="s">"lazyOnload"</span>
          <span class="p">/&gt;</span>
        <span class="p">)</span><span class="si">}</span>
      <span class="p">&lt;</span><span class="nc">Component</span> <span class="si">{</span><span class="p">...</span><span class="nx">pageProps</span><span class="si">}</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MyApp</span><span class="p">;</span>
</code></pre></div></div> <p>Here, we are using the <a href="https://nextjs.org/docs/api-reference/next/script">NextJS Script component</a> and lazy loading the script so that it doesn’t block our website from loading.</p> <p>We will also need to add the environment variables but before that, we need to add the website to Umami.</p> <p>Head over to Umami and then to Settings –&gt; Websites -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645090114917/h3EVdgmDM.png" alt="image.png"/></p> <p>Now, click on “Add website”</p> <p>I am naming this “Umami Tutorial” but you can name it whatever you want to. In the next field, make sure to enter the domain and NOT THE URL to the website.</p> <p>Note that I have quickly created a GitHub repository and deployed this NextJS app to <a href="https://vercel.com/">Vercel</a>. I have also checked “Enable Share URL” so that I can share the analytics for this website with you guys 😁</p> <p><a href="https://umami-tutorial.up.railway.app/share/3lOPyajp/Umami%20Tutorial">Here</a> it is.</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645090318295/8b01p6l-xH.png" alt="image.png"/></p> <p>Now, click on “Save” and then “Get tracking code” -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645090384630/csMsmGMW7.png" alt="image.png"/></p> <p>From the modal that appears, just copy the values of <code class="language-plaintext highlighter-rouge">data-website-id</code> and <code class="language-plaintext highlighter-rouge">src</code> -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645090430194/_Ep6VvsVs.png" alt="image.png"/></p> <p>Now, create a new file in your NextJS app called <code class="language-plaintext highlighter-rouge">.env.local</code> and add the following environment variables -</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NEXT_PUBLIC_UMAMI_SCRIPT_URL= # Your script URL, the value under `src`
NEXT_PUBLIC_UMAMI_WEBSITE_ID= # The website's id, the value under `data-website-id`
</code></pre></div></div> <p>Now, visit the website on your browser and take a look at the Umami dashboard, it should record a view and a visit under the “Realtime” tab -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645090808765/DClWJJP28.png" alt="image.png"/></p> <p>We can see more detailed analytics under the details page of the website -</p> <p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1645090870636/yVqIm4_VA.png" alt="image.png"/></p> <p>More data will pile up as you start getting visitors on your site</p> <p>Note: Some browsers like brave have in-built ad-blockers which blocks such scripts from loading in many cases. Even third-party ad-blockers can be responsible for this.</p> <p>If no data is showing up in your Umami dashboard, try a browser without ad-blockers (or private mode), try restarting your development server, and make sure that the values of the environment variables are right.</p> <p>Woohoo, that was a lot!</p> <h2 id="conclusion">Conclusion</h2> <p>We got Umami set up and running and added analytics to a NextJS application. Umami does a lot more like recording events. Take a look at <a href="https://umami.is/docs">their documentation</a> for more information.</p> <p>I hope everything worked out for you. Do feel free to comment on this article or reach out to me on <a href="https://twitter.com/AnishDe12020">Twitter</a> and I will help you out 😄</p> <h2 id="important-links">Important Links</h2> <ul> <li><a href="https://umami.is/">Umami</a></li> <li><a href="https://railway.app/">Railway</a></li> <li><a href="https://github.com/AnishDe12020/umami-tutorial">Repository</a> for this tutorial</li> </ul>]]></content><author><name>Anish De</name></author><category term="web"/><category term="next-js"/><category term="tools"/><category term="free-stuff"/><summary type="html"><![CDATA[A guide on settting up Umami on Railway and adding it to a Next.js project.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1645091755632/-NyymMbeL.png"/><media:content medium="image" url="https://cdn.hashnode.com/res/hashnode/image/upload/v1645091755632/-NyymMbeL.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">How to build a blog using Remix and MDX</title><link href="https://genicsblog.com/kira/how-to-build-a-blog-using-remix-and-mdx" rel="alternate" type="text/html" title="How to build a blog using Remix and MDX"/><published>2022-02-14T00:00:00+00:00</published><updated>2022-02-14T00:00:00+00:00</updated><id>https://genicsblog.com/kira/how-to-build-a-blog-using-remix-and-mdx</id><content type="html" xml:base="https://genicsblog.com/kira/how-to-build-a-blog-using-remix-and-mdx"><![CDATA[<p>Hey, folks 👋. Today we are going to build a new blog from scratch using <a href="https://remix.run/">Remix</a>, <a href="https://mdxjs.com/">MDX</a> and <a href="https://tailwindcss.com/">TailwindCSS</a></p> <h1 id="-whats-remix-yet-another-javascript-framework">🤔 What’s Remix? Yet another JavaScript framework</h1> <p>Remix is a full-stack web framework based on web fundamentals and modern UX. It is created by the team of <a href="https://reactrouter.com/">React Router</a>. Remix isn’t any brand new framework it had been over for a year but it was a paid framework over then but now the time had been changed and Remix is now free and open-source software 🚀.</p> <p>Remix is a React-based framework that allows to you render code on the server-side. Wait for a second 🤔 Doesn’t <a href="https://nextjs.org/">NextJS</a> do the same thing?</p> <p>Remix took the old problems but approached them in a new style 🐱‍💻.</p> <p>Remix only does Server Side Rendering (SSG), no Static Site Generation (SSG), and Incremental Static Regeneration (ISR) like NextJS.</p> <p>Applications which use Static Site Generation (SSG) are fast, easy to deploy but it is really hard to use dynamic data, as the pages would be re-built every time the dynamic data has been changed. In Remix, we are only doing Server Side Rendering (SSG), which is great for dynamic data but it would be hard to deploy as you would need to have an actual server to run it.</p> <p>Remix is suitable for applications that have multiple pages and which depend on some sort of dynamic data</p> <h1 id="-setting-up-the-project">🛠 Setting up the project</h1> <p>Let’s set up our project before getting started to code.</p> <ol> <li> <p>Create a new folder for our remix blog</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>remix-blog
</code></pre></div> </div> </li> <li> <p>Navigate into that folder</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>remix-blog
</code></pre></div> </div> </li> <li> <p>Open that folder in VSCode</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>code <span class="nb">.</span>
</code></pre></div> </div> </li> <li> <p>Initialize remix project in that folder</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npx create-remix@latest
</code></pre></div> </div> <ul> <li>The path of the remix application would be <code class="language-plaintext highlighter-rouge">./</code>, as we have already created a folder of our project</li> <li>We would be going to deploy our remix application on <a href="https://vercel.com">Vercel</a></li> <li>We are going to be using JavaScript for this project</li> </ul> </li> <li> <p>Starting a local development server</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run dev
</code></pre></div> </div> <p>This would start a local development server at <a href="http://localhost:3000">localhost:3000</a></p> </li> </ol> <h1 id="-understanding-the-folder-structure">📁 Understanding the folder structure</h1> <p>The folder structure of a remix application is pretty simple.</p> <ul> <li><code class="language-plaintext highlighter-rouge">api</code> folder contains all the backend/api code.</li> <li><code class="language-plaintext highlighter-rouge">app</code> folder contains most of the frontend code. <ul> <li><code class="language-plaintext highlighter-rouge">app/routes</code> folder contains the code for each route. Remix has the file-system based router similar to nextjs</li> </ul> </li> <li><code class="language-plaintext highlighter-rouge">public</code> folder contains the static files and assets that are served to the browser when our app is built or deployed.</li> </ul> <h1 id="-building-the-project">👨‍💻 Building the project</h1> <p>Let’s start building the blog now. Let’s first clean up the <code class="language-plaintext highlighter-rouge">app/routes/index.jsx</code> file.</p> <p><code class="language-plaintext highlighter-rouge">app/routes/index.jsx</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Index</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="p">=</span><span class="si">{</span><span class="err">‎</span><span class="p">{</span> <span class="nl">fontFamily</span><span class="p">:</span> <span class="dl">'</span><span class="s1">system-ui, sans-serif</span><span class="dl">'</span><span class="p">,</span> <span class="nx">lineHeight</span><span class="p">:</span> <span class="dl">'</span><span class="s1">1.4</span><span class="dl">'</span> <span class="p">}</span><span class="si">}</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Welcome to my blog<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>Remix supports the use of MDX to create a route module, which means we could create a new route using just a plain MDX file.</p> <p>Let’s create a new directory inside the <code class="language-plaintext highlighter-rouge">routes</code> directory called <code class="language-plaintext highlighter-rouge">posts</code> and inside that directory let’s create a new file called <code class="language-plaintext highlighter-rouge">first-blog-post.mdx</code></p> <p><code class="language-plaintext highlighter-rouge">app/routes/posts/first-blog-post.mdx</code></p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hey, welcome to my first blog post 👋
</code></pre></div></div> <p>To check out your first blog post, visit <a href="http://localhost:3000/posts/first-blog-post">localhost:3000/posts/first-blog-post</a></p> <p><strong>TADA</strong> 🎉, we have built a basic blog within 2 minutes</p> <p><img src="https://imgur.com/x5a8ovB.png" alt=""/></p> <h2 id="-adding-frontmatter">🙌 Adding frontmatter</h2> <p>The lines in the document above between the <code class="language-plaintext highlighter-rouge">---</code> are called “frontmatter”</p> <p>Let’s add some front matter to your first blog post page. You can think frontmatter as the metadata of that page.</p> <p>You can reference your frontmatter fields through the global attributes variable in your MDX.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
title: First Blog Post
---

Hey, welcome to {attributes.title} 👋
</code></pre></div></div> <p>Let’s now add metadata to our blog post’s page using frontmatter.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
title: First Blog Post
meta:
  title: First Blog Post
  description: ✨ WoW
---

Hey, welcome to {attributes.title} 👋
</code></pre></div></div> <p>As you can see the title of the page has been changed</p> <p><img src="https://imgur.com/i8ftVOK.png" alt=""/></p> <p>… and the description as well</p> <p><img src="https://imgur.com/yuFHUf6.png" alt=""/></p> <p>Let’s me quickly add a few blog posts</p> <p><img src="https://imgur.com/vI9iG0F.png" alt=""/></p> <p>Umm… 🤔 Our blog isn’t completed yet with any kind of syntax highlighting ✨</p> <h2 id="-adding-syntax-highlighting">✨ Adding syntax highlighting</h2> <p>We are going to be using <a href="https://highlightjs.org/">highlight.js</a> for syntax highlighting, you could even use <a href="https://prismjs.com/">prism</a>.</p> <h3 id="-about-mdx-plugins">🔌 About MDX plugins</h3> <p>We are going to achieve syntax highlighting using something called “MDX plugins”. By plugins, we could manipulate the process of MDX converting into HTML.</p> <p>Generally, there are two types of plugins</p> <ul> <li> <p>Remark plugins are responsible for manipulating the process of converting MDX to markdown.</p> </li> <li> <p>Rehype plugins are responsible for manipulating the process of converting the markdown to HTML.</p> </li> </ul> <p>For our remix blog, we are going to be using a rehype plugin called <a href="https://www.npmjs.com/package/rehype-highlight">rehype-highlight</a>. To install the package using the following command:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install </span>rehype-highlight
</code></pre></div></div> <p>We need to add a bit of configuration to the <code class="language-plaintext highlighter-rouge">remix.config.js</code> file</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">mdx</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">filename</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">rehypeHighlight</span><span class="p">]</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
    <span class="k">import</span><span class="p">(</span><span class="dl">'</span><span class="s1">rehype-highlight</span><span class="dl">'</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">mod</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">mod</span><span class="p">.</span><span class="k">default</span><span class="p">),</span>
  <span class="p">]);</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">rehypePlugins</span><span class="p">:</span> <span class="p">[</span><span class="nx">rehypeHighlight</span><span class="p">],</span>
  <span class="p">};</span>
<span class="p">};</span>
</code></pre></div></div> <p>Now our <code class="language-plaintext highlighter-rouge">remix.config.js</code> file would look something like this:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * @type {import('@remix-run/dev/config').AppConfig}
 */</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">appDirectory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">app</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">assetsBuildDirectory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">public/build</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">publicPath</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/build/</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">serverBuildDirectory</span><span class="p">:</span> <span class="dl">'</span><span class="s1">api/_build</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">ignoredRouteFiles</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">.*</span><span class="dl">'</span><span class="p">],</span>
  <span class="na">mdx</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">filename</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">[</span><span class="nx">rehypeHighlight</span><span class="p">]</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span>
      <span class="k">import</span><span class="p">(</span><span class="dl">'</span><span class="s1">rehype-highlight</span><span class="dl">'</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">mod</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">mod</span><span class="p">.</span><span class="k">default</span><span class="p">),</span>
    <span class="p">]);</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">rehypePlugins</span><span class="p">:</span> <span class="p">[</span><span class="nx">rehypeHighlight</span><span class="p">],</span>
    <span class="p">};</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div> <h3 id="-creating-a-layout-file">🧾 Creating a layout file</h3> <p>Now we have created a layout file, where we would import one of the highlight.js’s styling. I would be using night owl style, you could choose your style from highlight.js’s <a href="https://highlightjs.org/static/demo/">style demo page</a></p> <p>To create a layout file for our blog posts, we have created a new file with the same name as the folder name (<code class="language-plaintext highlighter-rouge">posts</code>) and the same level of the <code class="language-plaintext highlighter-rouge">posts</code> folder.</p> <p><img src="https://imgur.com/MtEUjC0.png" alt=""/></p> <p>Now we have to import the night owl theme into our layout file and use that as well.</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styles</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">highlight.js/styles/night-owl.css</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">Outlet</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">remix</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">links</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">rel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">stylesheet</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">href</span><span class="p">:</span> <span class="nx">styles</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">];</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Posts</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">&lt;</span><span class="nc">Outlet</span> <span class="p">/&gt;;</span>
<span class="p">}</span>
</code></pre></div></div> <p>In remix, we have the links function is similar to the links tag in HTML.</p> <blockquote> <p>PS: If you are a VSCode user then install this <a href="https://marketplace.visualstudio.com/items?itemName=amimaro.remix-run-snippets">remix run snippets extension</a> 🚀.</p> </blockquote> <p>Now let’s restart our local development server.</p> <p><strong>TADA</strong> 🎉, we have this wonderful syntax highlighting for our code blocks in our blog now</p> <p><img src="https://imgur.com/brpUvDo.png" alt=""/></p> <h2 id="-adding-tailwindcss-typography">🎨 Adding TailwindCSS Typography</h2> <p>Right now our blog has syntax highlight but the font isn’t looking great 🤔 and there is nothing great than <a href="https://tailwindcss.com/docs/typography-plugin">@tailwindcss/typography</a> plugin to automatically styles our entire page’s using a single <code class="language-plaintext highlighter-rouge">prose</code> class.</p> <h3 id="-installing-dependencies">📦 Installing dependencies</h3> <p>We need a few dependencies for us to use tailwindcss and tailwindcss’s typography plugin.</p> <p>Those dependencies are:</p> <ul> <li><a href="https://www.npmjs.com/package/concurrently">Concurrently</a>: Concurrently allows you to run multiple commands in a single terminal, so we can watch and build our tailwindcss styles as well as our entire remix application in a single terminal session</li> </ul> <p>Let’s install all of them:</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-D</span> tailwindcss concurrently @tailwindcss/typography
</code></pre></div></div> <h3 id="-configuring-tailwindcss">⚙ Configuring TailwindCSS</h3> <p>Create a new file named <code class="language-plaintext highlighter-rouge">tailwind.config.js</code>, this file would contain all the configurations for tailwindcss.</p> <p>Add the following configuration to the <code class="language-plaintext highlighter-rouge">tailwind.config.js</code> file</p> <p><code class="language-plaintext highlighter-rouge">tailwind.config.js</code></p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">mode</span><span class="p">:</span> <span class="dl">'</span><span class="s1">jit</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">purge</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">./app/**/*.{ts,tsx}</span><span class="dl">'</span><span class="p">],</span>
  <span class="na">darkMode</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="c1">// or 'media' or 'class'</span>
  <span class="na">theme</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">extend</span><span class="p">:</span> <span class="p">{},</span>
  <span class="p">},</span>
  <span class="na">variants</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">extend</span><span class="p">:</span> <span class="p">{},</span>
  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span><span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">@tailwindcss/typography</span><span class="dl">'</span><span class="p">)],</span>
<span class="p">};</span>
</code></pre></div></div> <p>We would have to change the scripts in <code class="language-plaintext highlighter-rouge">package.json</code></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="s2">"npm run build:css &amp;&amp; remix build"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"build:css"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tailwindcss -o ./app/tailwind.css"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"dev"</span><span class="p">:</span><span class="w"> </span><span class="s2">"concurrently </span><span class="se">\"</span><span class="s2">npm run dev:css</span><span class="se">\"</span><span class="s2"> </span><span class="se">\"</span><span class="s2">remix dev</span><span class="se">\"</span><span class="s2">"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"dev:css"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tailwindcss -o ./app/tailwind.css --watch"</span><span class="w">
  </span><span class="p">}</span><span class="err">,</span><span class="w">
</span></code></pre></div></div> <p>Importing tailwindcss into the <code class="language-plaintext highlighter-rouge">app/root.jsx</code> file</p> <p><code class="language-plaintext highlighter-rouge">app/root.jsx</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">styles</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./tailwind.css</span><span class="dl">'</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">links</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[{</span> <span class="na">rel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">stylesheet</span><span class="dl">'</span><span class="p">,</span> <span class="na">href</span><span class="p">:</span> <span class="nx">styles</span> <span class="p">}];</span>
<span class="p">};</span>
</code></pre></div></div> <p>Let’s restart our server and run the <code class="language-plaintext highlighter-rouge">npm run dev</code> command</p> <p>You would see an error saying that</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>app/root.jsx:9:19: error: Could not resolve "./tailwind.css
</code></pre></div></div> <p><img src="https://imgur.com/iHGXcv1.png" alt=""/></p> <p>This occurred because there is no <code class="language-plaintext highlighter-rouge">tailwind.css</code> file but you would see that the file is been created. If in your case the file didn’t create then create a new file named <code class="language-plaintext highlighter-rouge">tailwind.css</code> in the <code class="language-plaintext highlighter-rouge">app</code> directory and copy and paste the CSS from this gist, https://gist.github.com/Kira272921/4541f16d37e6ab4d278ccdcaf3c7e36b</p> <h3 id="-using-tailwindcsstypography-plugin">💻 Using @tailwindcss/typography plugin</h3> <p>Let’s open the <code class="language-plaintext highlighter-rouge">app/routes/posts.jsx</code> file and add few styling.</p> <blockquote> <p>As <code class="language-plaintext highlighter-rouge">app/routes/posts.jsx</code> file is the layout file for all the blog posts, if few add any kind of styling then it would reflect in the blog posts pages</p> </blockquote> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="p">(</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">'flex justify-center'</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">'prose lg:prose-xl py-10'</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nc">Outlet</span> <span class="p">/&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">);</span>
</code></pre></div></div> <p>Here are using the <code class="language-plaintext highlighter-rouge">@tailwindcss/typography</code> plugin</p> <p><strong>TADA</strong> 🎉. Look how beautiful the blog posts are looking now</p> <p><img src="https://imgur.com/v84Sreb.png" alt=""/></p> <h2 id="-creating-a-list-of-articles">📰 Creating a list of articles</h2> <p>Let’s create a list of articles on the main page (aka root route).</p> <p>In remix, you could import the entire mdx module as well as the attributes within them.</p> <p><code class="language-plaintext highlighter-rouge">app/index.js</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">firstPost</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./posts/build-a-cli-using-nodejs.mdx</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">secondPost</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./posts/build-a-rest-api-using-nodejs.mdx</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div> <p>The below function would return the slug (the file name, without the <code class="language-plaintext highlighter-rouge">.mdx</code>) with the markdown attributes</p> <p><code class="language-plaintext highlighter-rouge">app/index.jsx</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">postFromModule</span><span class="p">(</span><span class="nx">mod</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">slug</span><span class="p">:</span> <span class="nx">mod</span><span class="p">.</span><span class="nx">filename</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">\.</span><span class="sr">mdx</span><span class="se">?</span><span class="sr">$/</span><span class="p">,</span> <span class="dl">''</span><span class="p">),</span>
    <span class="p">...</span><span class="nx">mod</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">meta</span><span class="p">,</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div> <p>In remix, we use a loader function to load data on the server-side</p> <p><code class="language-plaintext highlighter-rouge">app/index.jsx</code></p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">loader</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span><span class="nx">postFromModule</span><span class="p">(</span><span class="nx">firstPost</span><span class="p">),</span> <span class="nx">postFromModule</span><span class="p">(</span><span class="nx">secondPost</span><span class="p">)];</span>
<span class="p">};</span>
</code></pre></div></div> <p>Here we are loading each of our MDX modules on the server-side using the loader function</p> <p>Finally, our <code class="language-plaintext highlighter-rouge">app/index.jsx</code> would look something like this</p> <div class="language-jsx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Link</span><span class="p">,</span> <span class="nx">useLoaderData</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">remix</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">firstPost</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./posts/build-a-cli-using-nodejs.mdx</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">secondPost</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./posts/build-a-rest-api-using-nodejs.mdx</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">postFromModule</span><span class="p">(</span><span class="nx">mod</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">slug</span><span class="p">:</span> <span class="nx">mod</span><span class="p">.</span><span class="nx">filename</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">\.</span><span class="sr">mdx</span><span class="se">?</span><span class="sr">$/</span><span class="p">,</span> <span class="dl">''</span><span class="p">),</span>
    <span class="p">...</span><span class="nx">mod</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">meta</span><span class="p">,</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="k">export</span> <span class="kd">const</span> <span class="nx">loader</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">[</span><span class="nx">postFromModule</span><span class="p">(</span><span class="nx">firstPost</span><span class="p">),</span> <span class="nx">postFromModule</span><span class="p">(</span><span class="nx">secondPost</span><span class="p">)];</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">BlogIndex</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">posts</span> <span class="o">=</span> <span class="nx">useLoaderData</span><span class="p">();</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">'prose lg:prose-xl py-10 pl-10'</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">h2</span><span class="p">&gt;</span>Articles<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">div</span> <span class="na">className</span><span class="p">=</span><span class="s">'flex justify-center'</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">ul</span><span class="p">&gt;</span>
          <span class="si">{</span><span class="nx">posts</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">post</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
            <span class="p">&lt;</span><span class="nt">li</span> <span class="na">key</span><span class="p">=</span><span class="si">{</span><span class="dl">'</span><span class="s1">posts/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">post</span><span class="p">.</span><span class="nx">slug</span><span class="si">}</span><span class="p">&gt;</span>
              <span class="p">&lt;</span><span class="nc">Link</span> <span class="na">to</span><span class="p">=</span><span class="si">{</span><span class="dl">'</span><span class="s1">posts/</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">post</span><span class="p">.</span><span class="nx">slug</span><span class="si">}</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">post</span><span class="p">.</span><span class="nx">title</span><span class="si">}</span><span class="p">&lt;/</span><span class="nc">Link</span><span class="p">&gt;</span>
              <span class="si">{</span><span class="nx">post</span><span class="p">.</span><span class="nx">description</span> <span class="p">?</span> <span class="p">(</span>
                <span class="p">&lt;</span><span class="nt">p</span> <span class="na">className</span><span class="p">=</span><span class="s">'m-0 lg:m-0'</span><span class="p">&gt;</span><span class="si">{</span><span class="nx">post</span><span class="p">.</span><span class="nx">description</span><span class="si">}</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
              <span class="p">)</span> <span class="p">:</span> <span class="kc">null</span><span class="si">}</span>
            <span class="p">&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
          <span class="p">))</span><span class="si">}</span>
        <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <p>This is how our main page looks 🚀 <img src="https://imgur.com/pmTnI47.png" alt=""/></p> <h2 id="-deploying-to-vercel">🚀 Deploying to Vercel</h2> <p>As our application let’s deploy it on vercel 🚀.</p> <ol> <li> <p>Initialize an empty git repository</p> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div> </div> </li> <li> <p>Create a new GitHub repository</p> </li> <li> <p>Push your changes to that repository</p> </li> </ol> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git remote add origin git@github.com:Kira272921/remix-blog.git <span class="c"># change URL to your repo's link</span>
  git add <span class="nb">.</span>
  git commit <span class="nt">-m</span> <span class="s2">"feat: initial commit"</span>
  git branch <span class="nt">-M</span> main
  git push <span class="nt">-u</span> origin main
</code></pre></div></div> <ol> <li> <p>If you don’t have an account on vercel, create one</p> </li> <li> <p>Create a new project</p> <p><img src="https://imgur.com/9wfhEQ9.png" alt=""/></p> </li> <li> <p>Import the remix application from our GitHub account</p> <p><img src="https://imgur.com/EMKOgOs.png" alt=""/></p> </li> <li> <p>Deploy the application</p> <p><img src="https://imgur.com/fgIkn2L.png" alt=""/></p> <ul> <li> <p>If you are getting an error something like this, add a new script to <code class="language-plaintext highlighter-rouge">package.json</code></p> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"postinstall"</span><span class="p">:</span><span class="w"> </span><span class="s2">"remix setup node"</span><span class="w">
</span></code></pre></div> </div> <p><img src="https://imgur.com/PAG3nla.png" alt=""/></p> </li> </ul> </li> </ol> <p>The entire code for this tutorial is present on <a href="https://github.com/kira272921/remix-blog">my GitHub</a>.</p> <p><a href="https://remix-blog-orcin.vercel.app/">Here</a> is what we have built today 🚀</p> <h3 id="-about-the-author">🧑 About the author</h3> <ul> <li><a href="https://kiradev.co">Portfolio</a></li> <li><a href="https://github.com/kira272921">Github</a></li> </ul> <p>So that’s it for this blog post folks 🤞. Meet y’all in the next blog.</p>]]></content><author><name>Kira</name></author><category term="frontend"/><category term="react"/><category term="remix"/><summary type="html"><![CDATA[The guide to teach you how to build a blog using the latest javascript framework, Remix 🚀.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/90365542/153700424-ffc22df1-7d4d-4530-983d-01eb5348807a.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/90365542/153700424-ffc22df1-7d4d-4530-983d-01eb5348807a.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">GitHub Repositories to Crush any Programming Interview</title><link href="https://genicsblog.com/github-repositories-to-crush-any-programming-interview" rel="alternate" type="text/html" title="GitHub Repositories to Crush any Programming Interview"/><published>2022-02-13T00:00:00+00:00</published><updated>2022-02-13T00:00:00+00:00</updated><id>https://genicsblog.com/github-repositories-to-crush-any-programming-interview</id><content type="html" xml:base="https://genicsblog.com/github-repositories-to-crush-any-programming-interview"><![CDATA[<p>Programming Interviews may be frustrating and tough. If you have any phobia regarding programming interviews, have no fear, because this articles is for you.</p> <p>Today I’ll be disclosing some repositories, you can visit to ace in any programming interviews. These were rated based on popularity, usability and reliability.</p> <h2 id="1-coding-interview-university">1. Coding Interview University</h2> <p><img src="https://i.imgur.com/UtbdPhu.png" alt="Coding Interview University"/></p> <p>This repository helps students prepare for companies like Amazon, Microsoft, Apple, etc. Some of the key features are :</p> <ul> <li>This is my multi-month study plan to become a software engineer for a large company.</li> <li>If you missed out on getting a degree in computer science, this will catch you up and save four years of your life.</li> <li>Note this is a study plan for software engineering, not web development. Large software companies like Google, Amazon, Facebook and Microsoft view software engineering as different from web development.</li> <li>The repository carefully differentiate between the topics, into Planning, Topic, and optional topics to cover to get a edge over others.</li> <li>It’s a long plan. It may take you months. However, if you are familiar with a lot of this already it will take you a lot less time.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/jwasham/coding-interview-university" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="2-tech-interview-handbook">2. Tech Interview Handbook</h2> <p><img src="https://i.imgur.com/OySmku6.png" alt="Tech Interview Handbook"/></p> <p>It has curated interview preparation materials for busy engineers. Some of the key elements are :</p> <ul> <li>There are free and curated technical interview preparation materials for busy engineers, brought to you by the author of the Blind 75 list.</li> <li>Besides the usual algorithm questions, it includes “Best practice questions for coding interviews”, “How to prepare for coding interviews”, “Straight-to-the-point Do’s and Don’ts”, “Algorithm tips categorized by topic”, and many more.</li> <li>This repository has practical content that covers all phases of a technical interview, from applying for a job to passing the interviews to offer negotiation. Technically competent candidates might still find the non-technical content helpful.</li> <li>The key to succeeding in technical interviews is consistent practice. It doesn’t bore you with too many words, and keeps everything to the point.</li> <li>The difference between this repository and others is that many existing interview repositories contain mainly links to external resources whereas this repository contains top-quality curated content directly for your consumption.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/yangshun/tech-interview-handbook" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="3-javascript-interview-questions">3. Javascript Interview Questions</h2> <p><img src="https://i.imgur.com/7WL4M2b.png" alt="Javascript Interview Questions"/></p> <p>This repo contains a huge list of 1000 JavaScripts Interview Questions. Some of the main features are :</p> <ul> <li>Take this JavaScript Projects course to go from a JavaScript beginner to confidently building your own projects.</li> <li>Take this coding interview bootcamp if you’re serious about getting hired and don’t have a CS degree.</li> <li>Take this Advanced JavaScript Course to learn advanced JS concepts and become a top JS developer.</li> <li>You can download the PDF and Epub version of this repository.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/sudheerj/javascript-interview-questions" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="4-javascript-algorithms">4. JavaScript Algorithms</h2> <p><img src="https://i.imgur.com/YDMQUNo.png" alt="JavaScript Algorithms"/></p> <p>It has JavaScript based examples of many popular algorithms and data structures explained. Some of the key features are :</p> <ul> <li>Each algorithm and data structure has its own separate README with related explanations and links for further reading (including ones to YouTube videos).</li> <li>The beginners and advanced are separated by using symbols <code class="language-plaintext highlighter-rouge">B</code> and <code class="language-plaintext highlighter-rouge">A</code> respectively.</li> <li>This repository has a seperate content for each topic in a systematic way.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/trekhleb/javascript-algorithms" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="5-how-web-works">5. How Web Works</h2> <p><img src="https://i.imgur.com/QI8EVky.png" alt="How Web Works" width="50%"/></p> <p>It helps to learn What happens behind the scenes when we type a URL in a browser. Let’s look at some of the features :</p> <ul> <li>If you wonder what happens behind the scenes when we type google.com in a browser, then you definitely need to check this out.</li> <li>This repository goes through a lot of minute details.</li> <li>This repository covers stuffs like DNS lookup, Opening of a socket + TLS handshake, HTTP Server Request Handle, The browser’s high level structure, and many more.</li> <li>This repository doesn’t waste much time and directly dives into the topic.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/vasanthk/how-web-works" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="6-interview">6. Interview</h2> <p><img src="https://i.imgur.com/nTjuurt.png" alt="Interview" width="50%"/></p> <p>This repo contains everything you need to prepare for your technical interview. Some features include :</p> <ul> <li>Lists of books to learn algorithms.</li> <li>List of websites to practice coding.</li> <li>Guides you may need.</li> <li>It also contains list of book specifically for job interviews and needs of industries.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/Olshansk/interview" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="7-system-design-primer">7. System Design Primer</h2> <p><img src="https://i.imgur.com/92JYYEj.png" alt="System Design Primer" width="50%"/></p> <p>It helps to learn how to design large-scale systems. Preparation for the system design interview. Some features like:</p> <ul> <li>Learning how to design scalable systems will help to become a better engineer. System design is a broad topic. There is a vast amount of resources scattered throughout the web on system design principles.</li> <li>This repo is an organized collection of resources to help you learn how to build systems at scale.</li> <li>This is a continually updated, open source project.</li> <li>In addition to coding interviews, system design is a required component of the technical interview process at many tech companies. Practice common system design interview questions and compare your results with sample solutions: discussions, code, and diagrams.</li> <li>Also contains additional for interview preparation.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/donnemartin/system-design-primer" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="8-how-to-secure-anything">8. How to secure anything</h2> <p><img src="https://i.imgur.com/bgspVPq.png" alt="How to secure anything"/></p> <p>This repo contains everything you need to learn on security engineering. Like :</p> <ul> <li>Its lessons are not just applicable to computer security.</li> <li>This repository aims to document a process for securing anything, whether it’s a medieval castle, an art museum, or a computer network.</li> <li>Even you can contribute for this article.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/veeral-patel/how-to-secure-anything" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="9-ganqqwerty">9. Ganqqwerty</h2> <p><img src="https://i.imgur.com/DWg2bPc.png" alt="Ganqqwerty" width="40%"/></p> <p>This repo has 123 essential JavaScript Questions to prepare for interview. Some features include :</p> <ul> <li>This book’s goal is to help javascript frontend developers prepare for technical job interviews through a collection of carefully compiled questions.</li> <li>You can even get this in paperback format. This repository is still getting updated, so for early access you can visit this repository.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/ganqqwerty/123-Essential-JavaScript-Interview-Questions" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="10-javascript-question">10. JavaScript Question</h2> <p><img src="https://i.imgur.com/alD4VBP.png" alt="JavaScript Question"/></p> <p>It is a long list of advance JavaScript questions, and their explanations. Some of the key features are:</p> <ul> <li>From basic to advanced: test how well you know JavaScript, refresh your knowledge a bit, or prepare for your coding interview.</li> <li>This repository gets updated daily, so new questions are added every day.</li> <li>The questions also come with explanation along with answers.</li> <li>The repository covers almost every single type of question, one can expect in an interview.</li> </ul> <div class="text-center mb-6"> <a class="px-3 py-1 font-bold hover:shadow-lg rounded-md bg-black dark:bg-slate-100 dark:text-black text-white text-lg hover:scale-110 transition underline-none" href="https://github.com/lydiahallie/javascript-questions" target="_blank" rel="nofollow noreferrer noopener"> Check it out &gt; </a> </div> <h2 id="thank-you-for-reading">Thank you for reading!</h2> <p>I write blogs on programming, web development, and current technology trend. If you find this article interesting, do share it with others, and comment your thoughts. Follow me on <a href="https://twitter.com/gh_x_st07">twitter</a>.</p> <p>Until We Meet Again, Arindol Sarkar.</p>]]></content><author><name>Arindol Sarkar</name></author><category term="web"/><category term="web-development"/><category term="beginners"/><summary type="html"><![CDATA[These repositories help students to prepare for coding interviews at companies like Amazon, Microsoft, Apple, etc.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/153745097-024d43ec-e7fa-4143-9b64-258b100f7da2.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/153745097-024d43ec-e7fa-4143-9b64-258b100f7da2.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">15 underrated HTML attributes every web developer should know</title><link href="https://genicsblog.com/underrated-html-attributes-every-webdev-should-know" rel="alternate" type="text/html" title="15 underrated HTML attributes every web developer should know"/><published>2022-02-12T00:00:00+00:00</published><updated>2022-02-12T00:00:00+00:00</updated><id>https://genicsblog.com/underrated-html-attributes-every-webdev-should-know</id><content type="html" xml:base="https://genicsblog.com/underrated-html-attributes-every-webdev-should-know"><![CDATA[<p>HTML may not be a programming language per se, but there’s no doubt in the power it possesses. We often depend on external javascript libraries for some basic tasks, but need for some of them might end today!</p> <p>In this article we will discuss about <strong>15 HTML attributes</strong> you probably did not know, but need to know for sure.</p> <p>Let’s get started!</p> <h2 id="1-autocomplete">1. Autocomplete</h2> <p>The <code class="language-plaintext highlighter-rouge">autocomplete</code> attributes specifies whether the browser is allowed to aid in filling out the form fields or not. If turned on, it will assist users with autofilling options such as email, phone numbers, nationality, and so on.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">name=</span><span class="s">"credit-card-number"</span> <span class="na">id=</span><span class="s">"credit-card-number"</span> <span class="na">autocomplete=</span><span class="s">"off"</span><span class="nt">&gt;</span>
</code></pre></div></div> <p>You can check out all the autocomplete values from the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete">MDN docs</a>.</p> <h2 id="2-download">2. Download</h2> <p>The <code class="language-plaintext highlighter-rouge">download</code> attribute on an anchor tag specifies that the file/object should be downloaded to the local storage when a user clicks on the hyperlink.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"document.pdf"</span> <span class="na">download</span><span class="nt">&gt;</span>Download PDF<span class="nt">&lt;/a&gt;</span>
</code></pre></div></div> <h2 id="3-contenteditable">3. Contenteditable</h2> <p>The <code class="language-plaintext highlighter-rouge">contenteditable</code> attribute allows the user to edit the content of an element.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">contenteditable=</span><span class="s">"true"</span><span class="nt">&gt;</span>
  You can now edit this text!
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div> <h2 id="4-readonly">4. Readonly</h2> <p>The <code class="language-plaintext highlighter-rouge">readonly</code> attribute specifies that an input field is read-only and can’t be edited.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">id=</span><span class="s">"sports"</span> <span class="na">name=</span><span class="s">"sports"</span> <span class="na">value=</span><span class="s">"golf"</span> <span class="na">readonly</span><span class="nt">&gt;</span>
</code></pre></div></div> <p>A user can still highlight it, and copy the text. To forbid those actions, use the <code class="language-plaintext highlighter-rouge">disabled</code> attribute instead.</p> <h2 id="5-accept">5. Accept</h2> <p>The <code class="language-plaintext highlighter-rouge">accept</code> attribute states which file types are allowed to be selected in the input.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"file"</span> <span class="na">accept=</span><span class="s">".jpg, .png"</span><span class="nt">&gt;</span>
</code></pre></div></div> <p>This attribute can only be used on an <code class="language-plaintext highlighter-rouge">&lt;input&gt;</code> tag with <code class="language-plaintext highlighter-rouge">type="file"</code>. To allow all files of specific media type, use an asterisk beside its name. For example, <code class="language-plaintext highlighter-rouge">accept="image/*"</code>.</p> <h2 id="6-autofocus">6. Autofocus</h2> <p>The <code class="language-plaintext highlighter-rouge">autofocus</code> attribute indicates that the particular element should be focused on page load.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">autofocus</span><span class="nt">&gt;</span>
</code></pre></div></div> <p><strong>Note</strong>: Only one element in the HTML document or a dialog may have the autofocus attribute. If applied to multiple elements only the first one will receive focus.</p> <h2 id="7-hidden">7. Hidden</h2> <p>The <code class="language-plaintext highlighter-rouge">hidden</code> attribute specifies whether or not the element is visible.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p</span> <span class="na">hidden</span><span class="nt">&gt;</span>I am invincible 💪<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div> <h2 id="8-spellcheck">8. Spellcheck</h2> <p>The <code class="language-plaintext highlighter-rouge">spellcheck</code> attribute defines whether the element is checked for spelling errors.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p</span> <span class="na">contenteditable=</span><span class="s">"true"</span> <span class="na">spellcheck=</span><span class="s">"true"</span><span class="nt">&gt;</span>Cehck mai spellnig<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div> <h2 id="9-controls">9. Controls</h2> <p>The <code class="language-plaintext highlighter-rouge">controls</code> attribute specifies whether or not the audio/video controls should be displayed on the default player.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;audio</span> <span class="na">controls</span><span class="nt">&gt;</span>
  <span class="nt">&lt;source</span> <span class="na">src=</span><span class="s">"rick_roll.mp3"</span>  <span class="na">type=</span><span class="s">"audio/mpeg"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/audio&gt;</span>
</code></pre></div></div> <h2 id="10-autoplay">10. Autoplay</h2> <p>The <code class="language-plaintext highlighter-rouge">autoplay</code> attribute ensures that the audio/video will automatically start playing as soon as it is loaded.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;video</span> <span class="na">autoplay</span>
  <span class="na">src=</span><span class="s">"https://cdn.mysite.com/media/myvideo.mp4"</span>
  <span class="na">poster=</span><span class="s">"image.png"</span><span class="nt">&gt;</span>
<span class="nt">&lt;/video&gt;</span>
</code></pre></div></div> <h2 id="11-cite">11. Cite</h2> <p>The <code class="language-plaintext highlighter-rouge">cite</code> attribute is used to point out where a an element’s content is taken from, or referred to.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;blockquote</span> <span class="na">cite=</span><span class="s">"https://genicsblog.com/"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;p&gt;</span>An awesome publication for developers.<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/blockquote&gt;</span>
</code></pre></div></div> <h2 id="12-datetime">12. Datetime</h2> <p>The <code class="language-plaintext highlighter-rouge">datetime</code> attribute specifies the date and time when the text was deleted/inserted.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p&gt;</span>
  My plans for 2023 include joining Google as a SDE,
  <span class="nt">&lt;del</span> <span class="na">datetime=</span><span class="s">"2021-01-01T18:21"</span><span class="nt">&gt;</span>creating 6 courses,<span class="nt">&lt;/del&gt;</span> 
  <span class="nt">&lt;ins</span> <span class="na">datetime=</span><span class="s">"2021-02-02T14:07"</span><span class="nt">&gt;</span>writing 12 articles.<span class="nt">&lt;/ins&gt;</span>
<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;p&gt;</span>I will evaluate the completion on <span class="nt">&lt;time</span> <span class="na">datetime=</span><span class="s">"2021-12-31"</span><span class="nt">&gt;&lt;/time&gt;</span>.<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div> <h2 id="13-async">13. Async</h2> <p>The <code class="language-plaintext highlighter-rouge">async</code> attribute ensures the script is executed asynchronously with the rest of the page.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://icanheckyou.com/heckingScript.js"</span> <span class="na">async</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div> <p><strong>Note</strong>: The <code class="language-plaintext highlighter-rouge">async</code> attribute has an effect on external scripts only.</p> <h2 id="14-defer">14. Defer</h2> <p>The <code class="language-plaintext highlighter-rouge">defer</code> attribute ensures the script is executed when the page has finished parsing.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://anotherhecker.com/heckingScriptAgainCozWhyNot.js"</span> <span class="na">defer</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div> <p><strong>Note</strong>: The <code class="language-plaintext highlighter-rouge">defer</code> attribute has an effect on external scripts only.</p> <h2 id="15-inputmode">15. Inputmode</h2> <p>The <code class="language-plaintext highlighter-rouge">inputmode</code> attribute hints at the type of data that might be entered by the user while editing the element or its contents. It also helps the mobile browsers to display the keyboard in the appropriate mode.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">inputmode=</span><span class="s">"url"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">inputmode=</span><span class="s">"email"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">inputmode=</span><span class="s">"numeric"</span> <span class="nt">/&gt;</span>
</code></pre></div></div> <h3 id="thanks-for-reading">Thanks for reading!</h3> <p>I hope this article was able to help you learn more about HTML and share some knowledge with you.</p> <p>If you liked this post, subscribe to my <a href="https://abhirajbhowmick.substack.com">newsletter</a> to never miss out on <a href="https://abhiraj.co" rel="dofollow">my blogs</a>, product launches, and tech news. Follow me on <a href="https://twitter.com/rainboestrykr">Twitter</a> for daily threads on web dev resources!</p>]]></content><author><name>Abhiraj Bhowmick</name></author><category term="web"/><category term="web-development"/><category term="tips"/><category term="beginners"/><summary type="html"><![CDATA[There are a few lesser known HTML attributes that are easy to learn and can help you to achieve common tasks, which would otherwise be fulfilled using some external libraries.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/153724225-aa374faa-db20-451f-9291-fcdc4db064cf.png"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/153724225-aa374faa-db20-451f-9291-fcdc4db064cf.png" xmlns:media="http://search.yahoo.com/mrss/"/></entry><entry><title type="html">Genics Log #1: Sponsorship from BeyondWords, Open Source, Organic Stats and more</title><link href="https://genicsblog.com/genics-log-1" rel="alternate" type="text/html" title="Genics Log #1: Sponsorship from BeyondWords, Open Source, Organic Stats and more"/><published>2022-02-10T00:00:00+00:00</published><updated>2022-02-10T00:00:00+00:00</updated><id>https://genicsblog.com/genics-log-1</id><content type="html" xml:base="https://genicsblog.com/genics-log-1"><![CDATA[<p>Hello there, I hope you are doing well!</p> <p>This is the first article in the <a href="/category/genics-log">Genics log</a> series where we will be documenting our monthly progress on the blog and report what’s been brewing up in the past months.</p> <p>Before diving into the latest news at Genics, I would like to introduce myself. I am <a href="/author/gouravkhunger/">Gourav Khunger</a>, the founder of <a href="/">Genics Blog</a>. I am a teenager from India who is passionate about software development and <a href="/tag/open-source/">open source</a>.</p> <p>Let’s get started!</p> <h1 id="introduction">Introduction</h1> <p>Genics Blog went <a href="https://github.com/genicsblog">open-source</a> at this New Year, which means we started accepting community contributions for the blog.</p> <p>Within a month itself, we have reached huge milestones! Here’s a gist of some stats from the past month:</p> <ul> <li>The <strong>Core team</strong> members increased from <strong>1 to 5 members</strong>!</li> <li>A total of <strong>15 articles</strong> were posted in January!</li> <li>A total of <strong>40 members</strong> joined the <a href="https://discord.genicsblog.com">Genics Blog discord server</a>!</li> <li>Rose from <strong>200 monthly visitors to 500+</strong>!</li> </ul> <h1 id="how-it-all-started">How it all started</h1> <p>I always wanted to create a community of skilled developers who create quality content around topics!</p> <p>As the new year began, I grabbed the opportunity to open source my <a href="https://blog.gouravkhunger.xyz">existing blog</a> and build a community around the existing content.</p> <p>And since we chose the open source way, we quickly rose from 200 visitors/month to 500+ visitors/month!</p> <h1 id="open-source-setup">Open Source Setup</h1> <p>We use <a href="https://github.com">GitHub</a> for our open source projects. Everything we build around Genics is open source because we want to be as transparent as we can!</p> <p>For this blog, we used <a href="https://jekyllrb.com">Jekyll</a> to generate the website and render all the content. The beauty of Jekyll is we can use any design template, while writing the articles in markdown format. It renders the complete site with an easy build command!</p> <p><a href="https://pages.github.com">GitHub Pages</a> works really well for hosting the website, because jekyll generates static html pages which work seamlessly with GitHub Pages.</p> <p>There’s a lot more to share on how the site and management works. I’d love to write articles on how we build and operate our systems completely for <strong>FREE</strong>, so keep an eye out on the <a href="https://docs.genicsblog.com/developer">developer documentation</a> and future posts on Genics blog!</p> <h1 id="announcing-beyondwordsio-sponsorship">Announcing BeyondWords.io Sponsorship</h1> <p>Just a few days ago we got sponsored by <a href="https://beyondwords.io/?utm_source=genicsblog.com&amp;utm_medium=cpc&amp;utm_campaign=advertisement" rel="dofollow">BeyondWords.io</a>!</p> <blockquote> <p>BeyondWords is an AI voice and audio publishing platform that brings frictionless audio to writers, newsrooms, and businesses!</p> </blockquote> <p>It is a platform that allows anyone to publish their written scripts in audio format to the world. In my opinion, the best part about is its text to speech AI conversion modules are far better than those of Google and Amazon as the audio it generates seems to be near human voice!</p> <p><a href="/">Genics Blog</a> got sponsored by <a href="https://beyondwords.io">BeyondWords</a> where they generously offered us free services to convert our articles to audio formats! You can try out the audio functionality right at the top of this post!</p> <h1 id="stats">Stats</h1> <p>We have grown manifolds just because of the fact that we went open source!</p> <h2 id="open-source">Open Source</h2> <p>Here are the stats for the repositories under <a href="https:/github.com/genicsblog">Genics Blog</a> organization:</p> <ul> <li><a href="https://github.com/genicsblog/genicsblog.com"><code class="language-plaintext highlighter-rouge">genicsblog.com</code></a> (Main repo with posts and data files): <strong>21 stars</strong>, <strong>14 forks</strong></li> <li><a href="https://github.com/genicsblog/theme-files"><code class="language-plaintext highlighter-rouge">theme-files</code></a> (Basically template files): <strong>2 stars</strong>, <strong>1 fork</strong></li> <li><a href="https://github.com/genicsblog/docs"><code class="language-plaintext highlighter-rouge">docs</code></a> (<a href="https://docs.genicsblog.com">Documentation website</a>): <strong>3 stars</strong>, <strong>2 forks</strong></li> <li><a href="https://github.com/genicsblog/genics-bot"><code class="language-plaintext highlighter-rouge">genics-bot</code></a> (Bot for the <a href="https://discord.genicsblog.com">Discord server</a>): <strong>5 star</strong>, <strong>1 fork</strong></li> </ul> <h2 id="google-analytics">Google Analytics</h2> <p>Images speak louder than words!</p> <p><img src="https://user-images.githubusercontent.com/46792249/153484864-a8bf7f54-03aa-4f30-95d8-7f94e2e94949.png" alt="Genics blog's past 30 days Google Analytics Stats"/></p> <h2 id="organic-stats">Organic Stats</h2> <p><img src="https://user-images.githubusercontent.com/46792249/153484772-c2a0a786-0826-4771-85a8-c70f55dcb719.png" alt="Genics blog's past 30 days Google Search Console Stats"/></p> <h1 id="future-plans">Future Plans</h1> <p>We are looking forward to producing a lot of quality content in the future, as well as working on improving the platform.</p> <p>Here are a few examples of some things we’d work on in the near future:</p> <ul> <li>Building certain tools to aid the writing process for authors at Genics Blog.</li> <li>Adding table of content to the posts.</li> <li>Social previews for anchor tags in posts.</li> <li>Copy buttons for code blocks.</li> <li>Adding some cool webmention functionality to our articles, so as to highlight who shares our articles.</li> </ul> <p>And a lot more!</p> <p>You can check out the issues page on <a href="https://github.com/genicsblog/theme-files/issues"><code class="language-plaintext highlighter-rouge">theme-files</code></a> repo to see what’s on the roadmap.</p> <h1 id="final-words">Final Words</h1> <p>I’m really glad to be sharing this info with you!</p> <p>Did you know we have a discord bot that sends notifications on our analytics and stats everyday 👀. I bet you, hardly anyone would do that :P</p> <p><img src="https://user-images.githubusercontent.com/46792249/153487310-2dcd5854-4de9-47fa-a679-09a917d8564f.png" alt="Genics Blog's Discord Community Bot logging stats from Google Analytics everyday"/></p> <p>Do join us there to get notified of new posts and updates on Genics Blog.</p> <p>If you find what we are doing as high school students fascinating, consider joining us and be a part of Genics Blog! <a href="/contribute">Here</a> are the ways you could contribute to it.</p> <p>Looking forward to seeing you engage with the active community on our <a href="https://discord.genicsblog.com">Discord server</a> :)</p>]]></content><author><name>Gourav Khunger</name></author><category term="genics-log"/><summary type="html"><![CDATA[Here's the issue #1 in the Genics log series containing all the latest news and updates on our blog's past month of January!]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://user-images.githubusercontent.com/46792249/153496992-8f711280-7740-4153-b825-0b1ba556bf6c.jpg"/><media:content medium="image" url="https://user-images.githubusercontent.com/46792249/153496992-8f711280-7740-4153-b825-0b1ba556bf6c.jpg" xmlns:media="http://search.yahoo.com/mrss/"/></entry></feed>